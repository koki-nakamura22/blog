<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Koki&#39;s personal blog</title>
    <link>https://koki-nakamura22.github.io/blog/ja/posts/</link>
    <description>Recent content in Posts on Koki&#39;s personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 08 Oct 2019 22:33:13 +1100</lastBuildDate>
    
	<atom:link href="https://koki-nakamura22.github.io/blog/ja/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugoブログの記事を自動デプロイする方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/08/deploying-articles-on-hugo-automatically/</link>
      <pubDate>Tue, 08 Oct 2019 22:33:13 +1100</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/08/deploying-articles-on-hugo-automatically/</guid>
      <description>この記事では、Hugoブログの記事を自動デプロイする方法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 自動デプロイの仕組みを作る  batファイルを作成 PowerShellスクリプトファイルを作成 スクリプトファイルの使い方    対象読者  Hugoでブログを作成しておりかつ自動でデプロイしたい方   環境  Windows 10 (1903) Command Prompt Power Shell (5.1.18362.145) Hugo (0.57.2) Hugo-extended (0.58.2)   前提条件  GitHub上でHugoのブログ記事を管理している GitHub上のブログリポジトリを&amp;rdquo;public&amp;rdquo;ディレクトリとしてクローン済   自動デプロイの仕組みを作る スクリプトファイルを作成し、それを実行することで自動デプロイを行います。
今回はbatファイルとPowerShellのスクリプトファイルの両方を使います。
batファイルを使用する理由は、PowerShellスクリプトファイルを実行するのが楽になるからです。
batファイルを作成 &amp;ldquo;deploy.bat&amp;rdquo;というファイルをブログのルートディレクトリに作成し、下記のコードをペーストします。
powershell -NoProfile -ExecutionPolicy Unrestricted .\deploy.ps1 PowerShellスクリプトファイルを作成 &amp;ldquo;deploy.ps1&amp;rdquo;というファイルをブログのルートディレクトリに作成し、下記のコードをペーストします。
# Build the project. hugo # Go to public directory. Set-Location .\public # Add changes to git.</description>
    </item>
    
    <item>
      <title>&lt;a&gt;タグをクリックした時の表示先位置を調整する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/07/adjusting-link-dests-position/</link>
      <pubDate>Mon, 07 Oct 2019 18:31:02 +1100</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/07/adjusting-link-dests-position/</guid>
      <description> この記事では、同一ページ内へ飛ぶ&amp;lt;a&amp;gt;タグをクリックした時の表示先位置を調整する方法を説明します。
何故調整する必要があるのか？それは、本ブログの様に固定ヘッダを使用していると、&amp;lt;a&amp;gt;タグをクリックした時に表示されるアンカーがヘッダの後ろに隠れるからです。
この記事の内容です。
 対象読者 環境 前提条件 リンクのジャンプ先位置調整 参考にさせていただいたページ   対象読者  同一ページ内へ飛ぶ&amp;lt;a&amp;gt;タグをクリックした時の表示先位置を調整したい方   環境  CSS3   前提条件  なし   リンクのジャンプ先位置調整 add-on.css内で、下記のコードをリンク先のタグ(アンカー)に設定します。
この時、padding-topとmargin-topに設定する数値は必ず同じにしてください。
#target-tag { display: block; padding-top: 60px; margin-top: -60px; } このブログでは、下記のコードにて各見出しに対する調整を行っています。
/* For link destinations adjustment. */ #site-main .post .content h1, #site-main .post .content h2, #site-main .post .content h3, #site-main .post .content h4, #site-main .post .content h5, #site-main .post .content h6 { display: block; padding-top: 60px; margin-top: -60px; }  参考にさせていただいたページ ページ内リンクのジャンプ先の位置を複雑なタグは無しでCSSだけで調整する方法 | 大阪のホームページ制作会社YCOMxxxxxxxxxx </description>
    </item>
    
    <item>
      <title>VS Code上でホットリロード機能を含めたNode.js(Express)の開発環境構築方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/05/creating-dev-env-of-nodejs/</link>
      <pubDate>Sat, 05 Oct 2019 21:09:21 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/05/creating-dev-env-of-nodejs/</guid>
      <description>この記事では、VS Code上でホットリロード機能を含めたNode.js(Express)の開発環境構築方法について説明します。
この記事の内容です。
 対象読者 環境 前提条件 開発環境構築  プロジェクトディレクトリを作成 Expressインストール  インストール テスト用環境を構築  Nodemonのグローバルインストール  インストール 設定ファイル作成 launch.jsonの作成および編集 package.jsonを編集  プログラムのデバッグ実行方法  参考にさせていただいたページ   対象読者  VS Code上でNode.js(Express)の開発環境を構築したい方   環境  Windows 10 (1903) Visual Studio Code (1.38.1) Node.js (v10.16.3) npm (6.11.2)   前提条件  Node.js, npmおよびVS Codeインストール済   開発環境構築 プロジェクトディレクトリを作成 下記のコマンドを実行し、プロジェクト用のディレクトリを作成します。
使用するコマンドはWindows, MacおよびLinux環境すべてで同じです。
mkdir [project name] Expressインストール インストール 最初に、作成したプロジェクト用ディレクトリへ移動しておきます。
次に、下記のコマンドを実行しExpressをローカルインストールします。
npm install express --save-dev テスト用環境を構築 最初に下記にコマンドを実行します。</description>
    </item>
    
    <item>
      <title>Markdownファイルの目次を自動生成する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/04/making-table-of-contents-of-markdown/</link>
      <pubDate>Fri, 04 Oct 2019 22:48:18 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/04/making-table-of-contents-of-markdown/</guid>
      <description>この記事では、Markdownファイルの目次を自動生成する方法を説明します。
この記事の内容です。
 対象読者 前提条件 doctocをインストール 目次を自動生成 参考にさせていただいたページ   対象読者  Markdownで記述したドキュメントの目次を自動生成したい方   前提条件 お使いのPCにNode.jsをインストールしていること。
 doctocをインストール 下記のコマンドを実行します。
npm install -g doctoc  目次を自動生成 目次を作成したいMarkdownファイルが存在するディレクトリをパラメータに指定し、doctocコマンドを実行します。
下記は、カレントディレクトリを指定しています。
doctoc . 
「Everything is OK.」が表示されるまで待ち、その後、ファイルを開いてみると先頭に
&amp;lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&amp;gt; &amp;lt;!-- DON&amp;#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&amp;gt; **Table of Contents** *generated with [DocToc](https://github.com/thlorenz/doctoc)* と
&amp;lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&amp;gt; に囲まれて、目次が生成されているのを確認することができます。</description>
    </item>
    
    <item>
      <title>Hugoブログのコードブロックにコピーボタンを追加する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/03/hugo-adding-copy-button/</link>
      <pubDate>Thu, 03 Oct 2019 21:52:51 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/03/hugo-adding-copy-button/</guid>
      <description>この記事では、Hugoで作成したブログのコードブロックにコピーボタンを追加する方法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 コードブロックへコピーボタンを追加  JavaScriptのコードを追加 CSSのコードを追加  参考にさせていただいたページ   対象読者  Hugoで作成したブログのコードブロックにコピーボタンを追加したい方   環境  Hugo 0.57.2 Hugo-extended 0.58.2   前提条件  HugoおよびHugo-entendedインストール済み   コードブロックへコピーボタンを追加 JavaScriptのコードを追加 下記のコードをstatic/js/add-on.jsへ追加します。
今回、即時関数を使用しているのは、今後機能を追加することを考えると変数のスコープ範囲を広げたくなかったからです。
(() =&amp;gt; { &amp;#39;use strict&amp;#39;; if(!document.queryCommandSupported(&amp;#39;copy&amp;#39;)) { return; } function flashCopyMessage(el, msg) { el.textContent = msg; setTimeout(() =&amp;gt; { el.textContent = &amp;#34;Copy&amp;#34;; }, 1000); } function selectText(node) { let selection = window.getSelection(); let range = document.</description>
    </item>
    
    <item>
      <title>Hugoブログのコードブロックにタイトルを追加する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/02/hugo-code-block-title/</link>
      <pubDate>Wed, 02 Oct 2019 21:30:25 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/02/hugo-code-block-title/</guid>
      <description>この記事では、Hugoで作成したブログのコードブロックにタイトルを追加する方法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 コードブロックへタイトルを追加  JavaScriptのコードを追加 CSSのコードを追加 タイトルの設定方法  参考にさせていただいたページ   対象読者  Hugoで作成したブログのコードブロックにタイトルを追加したい方   環境  Hugo 0.57.2 Hugo-extended 0.58.2   前提条件  HugoおよびHugo-entendedインストール済み   コードブロックへタイトルを追加 JavaScriptのコードを追加 下記のコードをstatic/js/add-on.jsへ追加します。
今回、即時関数を使用しているのは、今後機能を追加することを考えると変数のスコープ範囲を広げたくなかったからです。
(function addTitleToCodeBlock() { let list = document.body.getElementsByClassName(&amp;#34;highlight&amp;#34;); for (i = 0; i &amp;lt;= list.length - 1; i++) { let code = list[i].firstElementChild.firstElementChild; let codeName = code ? code.className.split(&amp;#34;:&amp;#34;)[1] : null; if (codeName) { let div = document.</description>
    </item>
    
    <item>
      <title>Hugoブログにシンタックスハイライト機能を追加する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/10/01/hugo-syntax-highlight/</link>
      <pubDate>Tue, 01 Oct 2019 20:50:01 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/10/01/hugo-syntax-highlight/</guid>
      <description> この記事では、Hugoで作成したブログにシンタックスハイライト機能を追加する方法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 シンタックスハイライト機能を追加 参考にさせていただいたページ  対象読者  Hugoで作成したブログにシンタックスハイライト機能を追加したい方   環境  Hugo 0.57.2 Hugo-extended 0.58.2   前提条件  HugoおよびHugo-entendedインストール済み   シンタックスハイライト機能を追加 config.tomlへ下記のコードを追加します。
pygmentsCodefences = true pygmentsStyle = &amp;#34;fruity&amp;#34; pygmentsStyleへ代入する値を変更することで、様々なスタイルを使用することができます。
また、スタイルは下記のページから選択することができます。
Chroma Style Galleryxxxxxxxxxx
ちなみに、上記のコードで使用しているスタイルは&amp;rdquo;fruity&amp;rdquo;です。
 参考にさせていただいたページ Syntax highlighting in Hugo with Chroma | zwbetzxxxxxxxxxx </description>
    </item>
    
    <item>
      <title>Windows 10にRuby on Railsをインストールする方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/09/30/how-to-install-rails-on-windows/</link>
      <pubDate>Mon, 30 Sep 2019 21:23:27 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/09/30/how-to-install-rails-on-windows/</guid>
      <description>本記事では、Windows 10環境にRuby on Railsをインストールする方法を説明していきます。
本記事の内容です。
 対象読者 環境 前提条件 インストール方法 RubyとRuby on Railsがインストールされたことを確認 参考にさせていただいたページ  対象読者  Windows 10にRuby on Rails環境を作成したい方   環境  Windows 10 (1903) Chocolatey (0.10.15)   前提条件  Chocolateyインストール済み   インストール方法 下記のコマンドたちを管理者権限のコマンドプロンプトもしくはPowerShellで実行します。
REM Install Yarn choco install yarn -y REM Install Ruby choco install ruby -y REM Install msys2 choco install msys2 --params &amp;#34;/NoUpdate&amp;#34; -y refreshenv ridk install 2 3 REM Install SQLite gem uninstall sqlite3 --all ridk exec pacman -S mingw-w64-x86_64-sqlite3 gem install sqlite3 --platform ruby REM Install bundle gem install bundle REM Install Ruby on Rails gem install rails RubyやRuby on Railsインストール時にバージョンを指定したい方は、下記の様にRubyおよびRuby on Railsのインストールコマンドを置き換えてください。</description>
    </item>
    
    <item>
      <title>Hugo &#43; GitHub Pagesでブログを作成する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/09/15/how-to-make-blog-by-hugo-and-github-pages/</link>
      <pubDate>Sun, 15 Sep 2019 22:39:57 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/09/15/how-to-make-blog-by-hugo-and-github-pages/</guid>
      <description>本記事では、Hugo + GitHub Pagesの組み合わせでブログ環境を構築する方法について説明します。
上から順番に読んでいただくと、ブログを作成できるような流れになっています。
本記事の内容です。
 環境 前提条件 インストール サイトを作成 記事を作成 テーマを適用 ローカルでサーバ起動 GitHub PagesへDeploy  ゴール GitHub上でブログ用のリポジトリを作成 作成したリポジトリをクローン デプロイ用スクリプト作成 GitHub Pagesの設定 デプロイ  テーマ  テーマ一覧 個人的おすすめテーマ  参考にしたページ  環境 Windows10 (1903)
前提条件  Chocolateyインストール済み Gitインストール済み  インストール 下記コマンドを実行します。コマンドを実行するディレクトリはどこでも良いです。
choco install hugo -confirm choco install hugo-extended -confirm サイトを作成 サイトを作成したいディレクトリで下記コマンドを実行します。
[サイト名]には、好きなサイト名を入力してください。
hugo new site [サイト名] 記事を作成 記事を作成するには、作成したサイトディレクトリのルートで下記コマンドを実行します。
[ディレクトリ名]は、後述する各テーマに沿って指定します。
[記事名]は、好きな記事名を入力してください。
hugo new [ディレクトリ名]/[記事名].md 記事作成後は、自由に作成したMarkdownファイルを編集します。
テーマを適用 本記事内では、hugo-future-imperfect-slimを適用します。
最初に作成したサイトディレクトリのルートで下記のコマンドを実行し、GitHubからthemesディレクトリへテーマをダウンロードします。
git clone https://github.</description>
    </item>
    
    <item>
      <title>Windows 10でパッケージマネージャ(Chocolatey)を使用する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2019/09/04/how-to-install-chocolatey/</link>
      <pubDate>Wed, 04 Sep 2019 16:38:27 +1000</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2019/09/04/how-to-install-chocolatey/</guid>
      <description>本記事では、Chocolateyを使用し、Windows環境でLinuxのapt-getやyumを使用するパッケージ管理を実現する方法について説明します。
本記事の内容です。
 対象読者 インストール方法 インストールされたことを確認 実際に何かインストールしてみる インストール済みのパッケージ確認 アンインストール方法 パッケージのアップデート方法 参考にさせていただいたページ  対象読者  WindowsでもLinuxのapt-getやyumのような機能を使用したい方   インストール方法 下記のコマンドを、管理者権限で起動したコマンドプロンプト上で実行します。
@&amp;#34;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;#34; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;#34;iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))&amp;#34; &amp;amp;&amp;amp; SET &amp;#34;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;#34; もしくは、下記のコマンドを管理者権限で起動したPowerShell上で実行します。
Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://chocolatey.org/install.ps1&amp;#39;))  インストールされたことを確認 上記のコマンドが終了した後に
choco -v を実行し、下記のようにバージョン情報が表示されたらインストールが成功しています。
C:\WINDOWS\system32&amp;gt;choco -v 0.10.15  実際に何かインストールしてみる Chocolatey Software | Packagesxxxxxxxxxx を参考に、試しに7zipをインストールしてみます。
下記のコマンドを実行します。
この時、コマンドプロンプトやPowerShellは管理者権限で起動しておきましょう。(ソフトウェアをインストールする時は管理者権限が求められるため。)
また、途中で処理を続行するかを問われるので、「Y」を入力し続行します。
choco install 7zip  インストール済みのパッケージ確認 インストール済みのパッケージを確認する場合は、下記のコマンドを実行します。
試しに、上記でインストールした7zipが表示されるか確認してみましょう。
choco list -localonly  アンインストール方法 インストール済みのパッケージをアンインストールする際は、下記コマンドを実行します。</description>
    </item>
    
  </channel>
</rss>