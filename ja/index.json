[{
    "title": "Djangoの全ページのレスポンスに対しキャッシュを禁止する方法",
    "date": "",
    "description": "この記事では、Djangoの全ページのレスポンスに対しキャッシュを禁止する方法について説明します。",
    "body": "この記事では、Djangoの全ページのレスポンスに対しキャッシュを禁止する方法について説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 Djangoの全ページでキャッシュを禁止にする 何故、この対応が必要なのか？ 全ページでキャッシュを禁止にする方法 1. conf/settings.pyへの設定追加 2. ミドルウェアの作成 参考にしたページ 対象読者 Djangoの全ページでキャッシュ利用を禁止にしたい方 環境 Django (version 4.1.2) 前提条件 なし Djangoの全ページでキャッシュを禁止にする 何故、この対応が必要なのか？ ざっくり書くと「キャッシュサーバーがキャッシュを持つことが原因で、見られたくない情報が他人から見れてしまうのを防ぐため。」です。\n丸投げになりますが、ここらへんを読むと何故必要なのかの理解が深まるのかなと思います。\n第5章 暴露対策 プロキシキャッシュ対策 キャッシュ制御不備の脆弱性にご用心 また、以下の本の\n4.15 共有資源やキャッシュに関する問題\nでも細かく説明されているので、是非購入し読んでみてください。\n本書はキャッシュ対策以外のことも説明されているので、Webアプリ開発時のセキュリティ対策全般の勉強になります。(以下リンクにアフィリエイトの設定は行っていません。)\n体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践\n全ページでキャッシュを禁止にする方法 参考にしたページの内容とほぼ同じですが、以下の設定を行います。\n1. conf/settings.pyへの設定追加 conf/settings.pyのMIDDLEWAREリストへ、後ほど作成するミドルウェアを登録します。\nMIDDLEWARE = [ \u0026#39;corsheaders.middleware.CorsMiddleware\u0026#39;, \u0026#39;[アプリ名].middleware.nocache.NoCacheMiddleware\u0026#39;, # これを追加 \u0026#39;django.middleware.security.SecurityMiddleware\u0026#39;, \u0026#39;django.contrib.sessions.middleware.SessionMiddleware\u0026#39;, \u0026#39;django.middleware.common.CommonMiddleware\u0026#39;, \u0026#39;django.middleware.csrf.CsrfViewMiddleware\u0026#39;, \u0026#39;django.contrib.auth.middleware.AuthenticationMiddleware\u0026#39;, \u0026#39;django.contrib.messages.middleware.MessageMiddleware\u0026#39;, \u0026#39;django.middleware.clickjacking.XFrameOptionsMiddleware\u0026#39;, ] 2. ミドルウェアの作成 アプリのルートディレクトリにmiddlewareディレクトリを作成し、その中にnocache.pyを作成します。\nそして、nocache.pyの中に以下のコードを書きます。(コピペします。)\nfrom django.conf import settings from django.utils.deprecation import MiddlewareMixin class NoCacheMiddleware(MiddlewareMixin): def process_response(self, request, response): response[\u0026#39;Cache-Control\u0026#39;] = \u0026#39;private, no-store, no-cache, must-revalidate\u0026#39; return response これだけでアプリの全ページへアクセスした際のResponseに、上記で設定したキャッシュ利用を禁止する設定が追加されるようになります。\n参考にしたページ Djangoで全ページキャッシュ禁止にする方法 - まっしろブログ\rWSGIサーバで動作させているDjangoのWebサイトで、全ページにHTTPヘッダーを付加し、キャッシュ禁止にする方法を紹介します。\rbicstone.me\r",
    "ref": "/blog/ja/posts/django/disable-all-page-cache-on-django/"
  },{
    "title": "TabularInline (インラインフォーム) の値に初期値を設定",
    "date": "",
    "description": "この記事では、TabularInlineを使用し実装するインラインフォームの値に初期値を設定する方法について説明します。",
    "body": "この記事では、TabularInlineを使用し実装するインラインフォームの値に初期値を設定する方法について説明します。\nこの記事の内容です。\n対象読者 この記事で説明する内容 この記事で説明しない内容 環境 前提条件 インラインフォームに初期値を設定 対象読者 TabularInlineを使用し実装したインラインフォームの項目の値に初期値を設定したい方 この記事で説明する内容 TabularInlineを使用し実装するインラインフォームの項目の値に初期値を設定する方法 この記事で説明しない内容 TabularInlineの使い方\nTabularInlineの使い方については、 はじめての Django アプリ作成、その 7#リレーションを張ったオブジェクトの追加 あたりを参考に学習してください。 環境 Django (version 3.2.16) 前提条件 TabularInlineを使用しインラインフォーム実装済み インラインフォームに初期値を設定 以下の形でBaseInlineFormSetを継承したInlineFormSetクラスを作成し、\nそれをTabularInlineクラスを継承したInlineクラスのformsetプロパティに設定します。\nこれで、インラインフォームの各項目に好きな初期値を設定することができます。\n※各クラス名は、実際に使用しているものに読み替えてください。\nfrom django import forms from django.contrib import admin # 初期値設定のために、このクラスを作成。 class TestFormInlineFormSet(forms.models.BaseInlineFormSet): model = Test def __init__(self, *args, **kwargs): super(TestFormInlineFormSet, self).__init__(*args, **kwargs) if not self.instance.pk: # ここで設定する初期値は任意のもの。 self.initial = [ { \u0026#34;Modelの項目名\u0026#34;: \u0026#34;何かしらの初期値\u0026#34;, }, ] class TestInline(admin.TabularInline): model = Test formset = TestFormInlineFormSet # ここで、対象のインラインフォームに初期値設定のために作成したインラインフォームセットクラスを設定する。 # 以降、省略 @admin.register(Test) class TestForm(admin.ModelAdmin): # 省略 inlines = [TestInline] # 省略 ",
    "ref": "/blog/ja/posts/django/init-values-in-inline-in-admin/"
  },{
    "title": "doctocで目次を自動生成しつつ文字色を設定するスクリプト",
    "date": "",
    "description": "この記事では、doctocで目次を自動生成しつつ文字色を設定するスクリプトを紹介します。",
    "body": "この記事では、doctocで目次を自動生成しつつ文字色を設定するスクリプトを紹介します。\nこの記事の内容です。\n対象読者 環境 前提条件 スクリプトについて 余談 対象読者 doctocで目次を自動生成しつつ、リンク文字列に色をしたい方 環境 WSL2 (Ubuntu 22.04) Node.js (v18.1.0) 前提条件 Node.jsインストール済み doctocインストール済み スクリプトについて コードは以下の通りです。\nご自由にお使いください + カスタマイズしてください。\n使用方法は、本スクリプトを任意のディレクトリへ配置した後に\nnode doctoc-ext.js [マークダウンファイルのパス] を実行するだけです。 [マークダウンファイルのパス] には任意の値を指定してください。マークダウンファイルのパスは半角スペース区切りで複数指定できるようにしています。\n本スクリプトの内容です。\n本スクリプトでは、コマンドライン引数にて渡されたファイルに対し以下の処理を行っています。\ndoctocを使用し目次の生成 生成された目次に対し、正規表現を使用しfontタグを設定 余談 私の場合、本記事で紹介したスクリプトはHugoブログの記事に対し使用しているのですが、「何故、GitHub Actionsなどで自動化しないのか？」について。\n理由としては以下の2つがあります。\n以下のページなどを参照した感じ、文字色を変更できなさそう。\n→文字色が明らかにリンクだと分かるものにできないと、微妙な感じになるためこれは必須だと考えている。 READMEの目次の生成を自動化するGitHub Actions | Technote\rREADMEなどの目次を自動生成する GitHub Actions です。 導入手順 目次の位置を指定する 目次を入れたいマークダウンファイル内に以下のようなコメントを追加します。 例： WORKFLOWを設定 例： オプ.....\rtechnote.space\rデプロイ前にローカル環境で自分が思っている通りに目次を設定できているかを確認したい。\n→デプロイ時に自動で目次を生成するようにしてしまうと、ミスがあった際に再デプロイで必要になり、これは微妙だと考えている。 上記からスクリプトを作成し実行することで対応しているのですが、ここらへんをいい感じに解決できるソリューションがあれば嬉しいなーと思いつつ、途中で考えているのをやめた状態です。\n以上、余談でした。\n",
    "ref": "/blog/ja/posts/markdown/apply-link-color-to-table-of-contents-generated-by-doctoc/"
  },{
    "title": "実行環境のOSに依存しないHugoで作成したサイトのビルドとデプロイを一括で行うスクリプトを開発した話",
    "date": "",
    "description": "この記事では、開発したHugoで作成したサイトのビルドとデプロイを一括で行うスクリプトを紹介します。",
    "body": "この記事では、開発したHugoで作成したサイトのビルドとデプロイを一括で行うスクリプトを紹介します。\n過去にも似たような記事を書いていますが、今回は実行環境のOSに依存しないものにしています。\nこの記事の内容です。\n対象読者 環境 前提条件 開発したスクリプトについて ブログがGitHub Pagesでホストされていると、そもそもスクリプトが不要な話 対象読者 Hugoで作成したサイトのビルドおよびデプロイをいちいちコマンドを打って行いたくない方 環境 WSL2 (Ubuntu 22.04) Node.js (v18.1.0) 前提条件 Node.jsインストール済み 開発したスクリプトについて いちいちコマンドを順番に打ってビルドやデプロイを行いたくなかったため、以下のスクリプトを開発しました。\nよければ自由にお使いください + カスタマイズしてください。\n使用方法は、本スクリプトをHugoプロジェクトのルートディレクトリへ配置し、\nnode deploy.js を実行するだけです。\n事前準備として、publicディレクトリをGitHub Pagesのリポジトリを紐づけておく必要があります。\n本スクリプトの内容です。\n行っていることはシンプルで、以下のことを行っているだけです。\nHugoサイトをビルド 最新情報に更新されたpublicディレクトリへ移動し、git add、commit、pushを順に実行\n(コミットメッセージは年月日) ブログがGitHub Pagesでホストされていると、そもそもスクリプトが不要な話 ブログがGitHub Pagesでホストされている場合、そもそも、こういったスクリプトを作成しなくてもGitHub Actionsを使用したら同様のことを行えそうでした。\nどういった設定を行えばよいのかは以下の公式サイトにすべて記載されているので、そちらを参照ください。\nHost on GitHub\rDeploy Hugo as a GitHub Pages project or personal/organizational site and automate the whole process with Github Action Workflow\rgohugo.io\r",
    "ref": "/blog/ja/posts/hugo/automatically-build-and-deploy-hugo-site-script/"
  },{
    "title": "DjangoのFormで多重submitを防ぐ",
    "date": "",
    "description": "この記事では、DjangoのFormで多重submitを防ぐ方法について説明します。Djangoの...と書いてはいますが、Djangoに限らず、HTMLのformを使用するのであればどこでも使用可能だと思います。",
    "body": "この記事では、DjangoのFormで多重submitを防ぐ方法について説明します。\nDjangoの\u0026hellip;と書いてはいますが、Djangoに限らず、HTMLのformを使用するのであればどこでも使用可能だと思います。\nこの記事の内容です。\n対象読者 環境 前提条件 DjangoのFormで多重submitを防ぐ 対象読者 DjangoのFormで多重submitを防ぎたい方 環境 Django v4.1.2 前提条件 なし DjangoのFormで多重submitを防ぐ 以下のようにformのtypeがsubmitのinput要素に、onclickイベントを設定する。\n\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;送信\u0026#34; onclick=\u0026#34;this.disabled=true,this.form.submit();\u0026#34;\u0026gt; これだけで、HTMLのformで多重submitを防ぐことができます。\nただ、この方法だと連続でクリックしても2回目以降がsubmitされないというだけで、見た目は何も変わりません。\nもし見た目の変化 (1回クリックされたらグレーアウトするなど) が必要であれば、別途JavaScriptやTypeScriptにてCSSを動的に変更する処理を実装し使用してください。\n",
    "ref": "/blog/ja/posts/django/prevent-multiple-submit-on-django/"
  },{
    "title": "Djangoの特定のViewでキャッシュを無効化する",
    "date": "",
    "description": "この記事では、Djangoの特定のViewでキャッシュを無効化する方法について説明します。",
    "body": "この記事では、Djangoの特定のViewでキャッシュを無効化する方法について説明します。\nGoogle Chrome, Microsoft Edge, Firefoxにて動作確認済みです。\nこの記事の内容です。\n対象読者 環境 前提条件 Djangoの特定のViewでキャッシュを無効化する方法 対象読者 DjangoのViewでキャッシュを無効化したい方 環境 Django v4.1.2 前提条件 なし Djangoの特定のViewでキャッシュを無効化する方法 まず最初に、 以下のコードを追加し必要なものをインポートします。\nfrom django.utils.decorators import method_decorator from django.views.decorators.cache import never_cache 次に、以下の様にデコレータをキャッシュを無効化したいViewのクラスに設定します。\n@method_decorator(never_cache, name=\u0026#39;dispatch\u0026#39;) class HogeView(LoginRequiredMixin, FormView): ... これだけで、特定のViewのキャッシュを無効化できます。\n",
    "ref": "/blog/ja/posts/django/disable-cache-on-django/"
  },{
    "title": "WSL2 (Ubuntu 22.04) へphpenvおよびPHPをインストールする方法",
    "date": "",
    "description": "本記事では、WSL2 (Ubuntu 22.04) へphpenvおよびPHPをインストールする方法を説明します。",
    "body": "この記事では、WSL2 (Ubuntu 22.04) へphpenvおよびPHPをインストールする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 phpenvを使用しPHPをインストール phpenvのインストール phpenvを使用しPHPのインストール PHPが正常にインストールされたか確認 参考にしたページ 対象読者 WSL2環境へphpenvを使用してPHP環境を構築をしたい方 環境 WSL2 (Ubuntu 22.04) 前提条件 WSL2環境が使用可能 phpenvを使用しPHPをインストール phpenvのインストール phpenv公式の手順に従いインストール\nこの時、phpenv公式のインストール手順 に記載のある Install php-build into it and any php も必ず行う。\nPHPのダウンロードおよびインストールに必要なライブラリインストール\n以下のコマンドを上から順に実行する。\nsudo apt-get update sudo apt-get install -y libcurl4-openssl-dev libjpeg-dev libonig-dev libtidy-dev libxslt-dev libzip-dev autoconf curl -s https://raw.githubusercontent.com/php-build/php-build/master/build-openssl-1.0.sh | sh phpenvを使用しPHPのインストール 以下のコマンドを実行しphpenvを使用しPHPをインストールする。\nPKG_CONFIG_PATH=\u0026#34;$PKG_CONFIG_PATH:/usr/local/opt/openssl@1.0/lib/pkgconfig\u0026#34; phpenv install [バージョン番号] e.g. バージョン8.0.25をインストールする場合。\nPKG_CONFIG_PATH=\u0026#34;$PKG_CONFIG_PATH:/usr/local/opt/openssl@1.0/lib/pkgconfig\u0026#34; phpenv install 8.0.25 PHPが正常にインストールされたか確認 phpenv local [バージョン番号] や\nphpenv global [バージョン番号] を実行し、使用するPHPのバージョンを指定する。\nその後、\nphp -v を実行しターミナル上に上記で指定したPHPのバージョンが表示されることを確認する。\n参考にしたページ GitHub - phpenv/phpenv: Simple PHP version management\rSimple PHP version management. Contribute to phpenv/phpenv development by creating an account on GitHub.\rgithub.com\rUbuntu22.04でphpenv使おうと思ったらopensslのバージョン違いでbuildできない件 - Qiita\rmacの対策はたくさん記事が引っかかるけどubuntuの情報はあまり無いので同様の現象で詰まった方のために残しておきます。\r掲題ですが、phpenvとphp-buildをインストールしたubuntu22.04で、php7.4.30や8...\rqiita.com\rFIX nothing below PHP 8.1 installs in Ubuntu 22.04 (`RSA_SSLV23_PADDING` undeclared in OpenSSL 3.0.0) · Issue #718 · php-build/php-build\rmy system has openssl 3.0.2-0ubuntu1.1 ~/.phpenv/plugins/php-build/install-dependencies.sh: autoconf is already the newest version (2.71-2). bash is already the newest version (5.1-6ubuntu1). bison...\rgithub.com\rCentOS7にphpenvを導入しようとしたらエラーが出た part2 | カバの樹\rundefined\rwww.kabanoki.net\r",
    "ref": "/blog/ja/posts/php/install-phpenv-and-php-to-wsl2-ubunt2204/"
  },{
    "title": "Heroku無料プラン終了に伴う移行先に関する記事一覧",
    "date": "",
    "description": "この記事では、Heroku無料プラン終了に伴う移行先に関する記事の一覧を紹介します。新しい良い記事が見つかり次第、随時更新します。",
    "body": "この記事では、Heroku無料プラン終了に伴う移行先に関する記事の一覧を紹介します。新しい良い記事が見つかり次第、随時更新します。\n個人メモです。\n対象読者 Heroku無料プランを利用していたが、移行先がまだ決まっていない・わからない方 記事一覧 Herokuの新しい有料プランのまとめと、無料プラン終了後の個人的な移行方針について - give IT a try\rはじめに 2022年8月25日に、Herokuが無料プランを終了することを発表しました。blog.heroku.comまた、9月26日には前回のアナウンス時にはなかった、低コストプランが発表されました。blog.heroku.comいずれの内容も英語なので、日本語で要点をまとめてみます。 また、エントリの後半では無料プラン終了後の個人的な移行方針についても書いてみます。 おことわり このページの情報は2022年10月4日時点の情報です。時間が経つと情報が古くなっている可能性があります。 また、内容の正確性は保証しないので、正確な情報を知りたい場合は上記ページを参照してください。 8月25日に発…\rblog.jnito.com\rHerokuに代わる次世代ホスティングサービス 3選\rundefined\rzenn.dev\rHerokuの無料プランが終わるので、移行先を探してみた\rundefined\rzenn.dev\rHerokuの無料枠が廃止になるのでDeta.shへ移行する - Qiita\rHerokuのFree Planが終了するらしい(泣)\rStarting November 28, 2022, we plan to stop offering free product plans and plan to st\u0026hellip; qiita.com\n",
    "ref": "/blog/ja/posts/other/heroku-migration-destination-articles/"
  },{
    "title": "WEBデザインが大の苦手なSEがデザインを学ぶための資料集",
    "date": "",
    "description": "WEBデザインが大の苦手なSEがデザインを学ぶための資料集を紹介します。",
    "body": "この記事では、WEBデザインが大の苦手な筆者 (SE、プログラマ) がデザインを学ぶために使用する資料集を紹介します。\nはい、ただの個人メモです。\n対象読者 WEBデザインを勉強したい方 WEBデザインを学ぶためのページ これだけ守れば見やすくなるデザインの基礎\r2019/04/18に株式会社gumi様で行ったデザイン講義のスライドです。\rデザインとは何か？デザイナーは何を考えてデザインを作っているのか？\rという話から、実際にデザインを評価・検討するための言葉を紹介しています。\rこの 作品 は クリエイティブ・コモンズ 表示 - 改変禁止 4.0 国際 ライセンスの下に提供されています。\r第二回「UIデザインをはじめよう」はこちら https://speakerdeck.com/kinakobooster/uidezainwohazimeyou\n第三回「今日からできるUXデザイン」はこちら https://speakerdeck.com/kinakobooster/jin-ri-karadekiruuxdezain\n※訪問講座のご案内※ あなたの会社に話しに行きます。料金表はこちら https://xemono.life/#/workwith/consulting\nご質問はTwitter@kinakoboosterまでお気軽にどうぞ。 https://twitter.com/kinakobooster\n株式会社Xemonoの詳細はこちら https://xemono.life\n実践編・アイコンを実際に作る過程はこちら https://note.mu/xemono/n/nd7b696b78702\nとりいめぐみはこんなことを考えている人です http://noubrain.hateblo.jp/entry/2019/04/05/171255 speakerdeck.com\n未経験でも1カ月で即戦力クラスの知識が身に付く『webデザインドリル』公開 | knowledge / baigie\rbaigie.me\r【保存版】「もうデザイナー用の最強チートシート作っちゃおうよ」と現役デザイナー4人で超便利サイト情報を集約してみた20211017更新｜ryota_funakoshi｜note\rこんにちはデザイナー社長の船越です！久々のnote投稿ですが、ツイッターを見ていてデザイナー初学者の人から 「どこから画像を引っ張ってくればいいかわからない😭」 「日々の情報収集どうすればいいの？🤔」 という悩みをよく見かけます。そこでデザインオタクの僕が、普段見ているサイトや参考になる選りすぐりの情報を全部まとめました！デザイナーのクオリティと速度は引き出しで決まると僕は考えています。このまとめを見て皆さんの学習と仕事が少しでも捗るようになれば嬉しいです！たくさんのデザイナーさんの役に立つ記事にしたいため、「このツールも便利だよ！」というのがあればぜひコメントで教えてください！\rnote.com\rフロントエンドエンジニアから、デザイナーさんに意識してほしい10のこと｜Pittan｜note\rフロントエンドエンジニアとデザイナーさんは日々協力してプロダクトを作っていく関係にあります。デザイナーさんが作ってくれたものをエンジニアが素早く実現できるよう、いくつかエンジニアから意識してほしいことをまとめました。 なんでこんな話になったのか （前置きなので次の章まで飛ばしてOKです） デザイナーさんから「この画面をこんな風に作ってください」とXDやSketch、PSDなどいろいろな形で渡されることがあると思います。 僕の個人的な意見・経験ですが、いざ実装するぞとなったときに 「あれ…ここってどうしたらいいんだろう？」 と迷って作業のスピードが落ちてしまうことがとてもストレ\rnote.com\rなぜエンジニアが作る画面はダサいのか…?「理由」と「対策」を徹底解説【エンジニア向け画面デザイン講座】 - Qiita\r目次\nはじめに アプリの画面デザインを考えてみよう SEのAさんの画面デザイン デザイナーのBさんの画面デザイン 二人の画面デザインを比べてみよう SEが覚えておきたい画面デザインの心得6か条\u0026hellip; qiita.com\r参考にした情報 エンジニアもチェックしたいWEBデザインの基礎などが学べる人気エントリー#Web制作 #プログラミング初心者 #駆け出しエンジニアと繋がりたい #webデザイン pic.twitter.com/oFoAKuU5ul\n\u0026mdash; ハクト@WEBエンジニア (@hakuto00) September 20, 2022 ",
    "ref": "/blog/ja/posts/design/introduction-to-web-design-for-se/"
  },{
    "title": "CHALICEの自動ポリシー生成 (Automatic policy generation) 対象範囲の検証",
    "date": "",
    "description": "この記事では、CHALICEのAutomatic policy generation対象範囲が不明だったため、思いつく限り試し検証した結果を記載しています。",
    "body": "この記事では、CHALICEのAutomatic policy generation対象範囲が不明だったため、思いつく限り試し検証した結果を記載しています。\nこの記事の内容です。\nTL;DR 対象読者 環境 CHALICEの自動ポリシー生成 (Automatic policy generation) の対象範囲検証および結果 app.py project root/chalicelib内のファイル project root/directory内のファイル project root内のファイル (app.pyと同階層) 結論 参考にしたページ TL;DR app.py内にS3やDynamoDBといったLambda外を参照するコードを書きましょう。\n対象読者 CHALICEを使用していて自動ポリシー生成が行われない問題を解決したい方 環境 Python v3.9.12 CHALICE v1.27.1 CHALICEの自動ポリシー生成 (Automatic policy generation) の対象範囲検証および結果 以下の見出しは、boto3を使用しAutomatic policy generationのために処理を実装したファイルです。\napp.py以外はすべて、app.pyに処理を実装したファイルおよび関数をimportしています。\nプロジェクトはhelloworldという名前で作成しています。\napp.py 以下のコードを実装。\nfrom chalice.app import Chalice app = Chalice(app_name=\u0026#39;helloworld\u0026#39;) import boto3 @app.route(\u0026#39;/\u0026#39;) def index(): s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.download_file() 結果: PolicyのStatement内に以下が追加される。(Sidは省略)\n{ \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:GetObject\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;*\u0026#34; ], }, project root/chalicelib内のファイル プロジェクトルートにchalicelibディレクトリを作成し、その中に以下のファイルを作成する。\nimport boto3 def f(): s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.download_file() 次に、上記ファイルをapp.pyにimportし関数を参照させる。\nfrom chalice.app import Chalice app = Chalice(app_name=\u0026#39;helloworld\u0026#39;) from chalicelib.hoge import f @app.route(\u0026#39;/\u0026#39;) def index(): f() 結果: PolicyのStatement内にS3の内容が追加されない。\nproject root/directory内のファイル プロジェクトルートにfugaディレクトリを作成し、その中に以下のファイルを作成する。\nimport boto3 def f2(): s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.download_file() 次に、上記ファイルをapp.pyにimportし関数を参照させる。\nfrom chalice.app import Chalice app = Chalice(app_name=\u0026#39;helloworld\u0026#39;) from fuga import f2 @app.route(\u0026#39;/\u0026#39;) def index(): f2() 結果: PolicyのStatement内にS3の内容が追加されない。\nproject root内のファイル (app.pyと同階層) プロジェクトルートに以下のファイルを作成する。\nimport boto3 def f3(): s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.download_file() 次に、上記ファイルをapp.pyにimportし関数を参照させる。\nfrom chalice.app import Chalice app = Chalice(app_name=\u0026#39;helloworld\u0026#39;) from foo import f3 @app.route(\u0026#39;/\u0026#39;) def index(): f3() 結果: PolicyのStatement内にS3の内容が追加されない。\n結論 動作を確認する限りapp.pyのみAutomatic policy generationの対象範囲となっている。\nそのため、app.py外にS3やDynamoDBなどを参照するコードを実装したい場合は、以下のような対応をとる必要がある。\nfrom chalice.app import Chalice app = Chalice(app_name=\u0026#39;helloworld\u0026#39;) import boto3 @app.lambda_function() def for_automatic_policy_generation(): s3 = boto3.client(\u0026#39;s3\u0026#39;) s3.download_file() @app.route(\u0026#39;/\u0026#39;) def index(): # 何かしらの処理 ポリシー自動生成用にLambda関数を1つ実装することになりモヤモヤしますが、本記事執筆時点ではこうするしかないのかなと思います。\n後述する参考にしたページでは\n@app.route(\u0026#39;/\u0026#39;) def index(): 内にfor_automatic_policy_generationとほぼ同じ関数を呼び出すようにしていますが、全関数にそれを記述するのは美しくないですし、またダミーのWeb APIを生やすなら、どこからも参照されないLambda関数を1個作成する方が良いと考え上記の形にしています。\n参考にしたページ Bug: `chalice deploy` fails to discover required permissions for Lambda IAM role · Issue #692 · aws/chalice\rOrdinarily, chalice deploy finds IAM permissions required for the application to work, builds an IAM role and prompts the user for authorization to add necessary permissions to the role: $ chalice ...\rgithub.com\r",
    "ref": "/blog/ja/posts/python/chalice-automatic-policy-generation-range/"
  },{
    "title": "インボイス制度に関する記事一覧",
    "date": "",
    "description": "この記事では、インボイス制度に関する記事の一覧を紹介します。新しい良い記事が見つかり次第、随時更新します。",
    "body": "この記事では、インボイス制度に関する記事の一覧を紹介します。新しい良い記事が見つかり次第、随時更新します。\n記事一覧 国税庁 インボイス制度の概要\rインボイス制度の概要について、次のとおりとなります。\rwww.nta.go.jp\rインボイス制度に関するＱ＆Ａ目次一覧\r下記リンクから該当ページに遷移する事ができます。\rwww.nta.go.jp\rその他メディア インボイス制度に向けてフリーランスがやるべき対策3ステップ【わかりやすい図解つき】 - スモビバ！\rインボイス制度の開始に向けて、免税事業者のフリーランスが消費税の課税事業者になる場合、手取り収入が減ることや消費税申告の手間なども複合で判断する必要があります。インボイス制度の対応などを具体例と図解でわかりやすく説明します。\rsumoviva.jp\r消費税のルールが変わる、来秋から導入されるインボイス制度ってなに？　個人商店に迫られる選択｜まいどなニュース\r令和5年10月からスタートするインボイス制度（BBuilder/adobe.stock.com） 令和5年10月より「インボイス制度」がスタートする。消費税に関する制度だが、一般消費者にとって直接的には影響ない。最も大きな影響を受け...\rmaidonanews.jp\r見落としていない？ インボイス制度の3つの落とし穴 (1)\r2023年10月1日より開始される「インボイス制度」。開始まで1年4カ月を切ったが、freeeの調査によると、インボイス制度を理解している経理・財務担当はわずか3割程度にとどまっている。さらに理解している経理・財務担当にも知識の偏りが見られ、多大な負荷が発生する業務を見落としている可能性が高い。本稿では、インボイス制度は一体どのような制度なのかを一から説明し、経理・財務担当が見落としているかもしれない3つの落とし穴についても触れる。\rnews.mynavi.jp\r売上1000万円以下の免税事業者も、インボイス制度に登録したほうが良い？　メリットとデメリットを解説\rこの記事について\r2023年10月から適用されるインボイス制度。免税事業者がインボイスを発行するためには、\rwww.itmedia.co.jp\rインボイス制度で個人事業主大打撃？　過半数の企業が取引先に課税事業者化求める\r2023年10月に導入されるインボイス制度。実施まで1年半を切り、企業は対応を進めつつあるようだ。クラウド会計ソフトを提供するfreeeが\rwww.itmedia.co.jp\rなぜフリーランスはインボイス制度に注意すべきか？収入や取引先が減る可能性を考察 | ファイナンシャルフィールド\r2023年10月よりインボイス制度（適格請求書保存方式）の経過措置がスタートし、2029年10月には完全導入が決定しています。しかし、インボイス制度が施行されると、多くのフリーランスが収入や取引先を失う可能性があることをご存じでしょうか。 今回は、なぜインボイス制度でフリーランスの収入や取引先が減る可能性があるのかを、インボイス制度の概要を交えながら解説します。\rfinancial-field.com\r",
    "ref": "/blog/ja/posts/other/invoice-system-information-articles/"
  },{
    "title": "Pythonの静的型チェックをコマンドもしくはVS Code拡張機能に自動で行わせる方法",
    "date": "",
    "description": "この記事では、Pythonの静的型チェックをコマンドもしくはVS Code拡張機能に自動で行わせる方法について説明します。",
    "body": "この記事では、Pythonの静的型チェックをコマンドもしくはVS Code拡張機能に自動で行わせる方法を説明します。\n最初に方法、その後に「何故、それを調べようと思ったのか？」を知りたい方向けに経緯を書いているので、興味のある方はそちらも読んでいただけると嬉しいです。\nこの記事の内容です。\n対象読者 環境 前提条件 Pythonの静的型チェックを行う コマンドを使用 VS Codeの拡張機能を使用 何故調べようと思ったのか 事の発端は趣味でTypeScriptを触ったことによる静的型付け言語熱の再燃 たまたまPython互換の静的型付け言語を開発された型の記事が流れてきて興味を持つ Nimとの出会い そして本記事冒頭の話へ\u0026hellip; 元になったツイート達 対象読者 Pythonの型チェックをコマンドもしくはVS Code上で行いたい方 環境 VS Code 前提条件 pipインストール済み VS Codeインストール済み Pythonで型アノテーションを記述する方法を知っていること (本記事では説明を省略) Pythonの静的型チェックを行う コマンドを使用 mypyというライブラリをpipでインストールし使用する。\n使用方法は以下の公式ページに書いてあるので、こちらを参照。\nGitHub - python/mypy: Optional static typing for Python\rOptional static typing for Python. Contribute to python/mypy development by creating an account on GitHub.\rgithub.com\rVS Codeの拡張機能を使用 以下のページの通り、VS Codeに拡張機能Pylanceをインストールした上で1つ設定を行うと実現可能。\n設定方法についてはここで書いてしまうと参照元記事の筆者に申し訳ないので、そちらを参照。 How to enable Python type checking in VSCode\rSince version 3.5, Python now has support for type hints. This typing is a cool new feature allowing...\rwww.emmanuelgautier.com\r何故調べようと思ったのか 事の発端は趣味でTypeScriptを触ったことによる静的型付け言語熱の再燃 筆者自身が最近趣味でTypeScriptを触り、やっぱり静的型チェックがあるプログラミング言語の方が以下の恩恵を受けることができ、良いなと思ったためです。\nインテリセンスの恩恵をより受けることができる。 型周りのバグを自動で減らせる たまたまPython互換の静的型付け言語を開発された型の記事が流れてきて興味を持つ ほぼ同タイミングで、Python互換の静的型付け言語を開発された型の記事が流れてきました。\n記事はこちらです。\nPython互換の静的型付け言語「Erg」\rundefined\rzenn.dev\r最初は「いいじゃん！」と思ったのですが、自分が欲しい機能を落ち着いて考えてみたところ、以下のツイートに行きつきました。 PythonのTypeScriptポジション言語が登場する方が嬉しいという、率直な感想が出てきた。\n\u0026mdash; Koki@ITと時々英語の再始動のために動いている人 (@koki_n22) August 13, 2022 Nimとの出会い ここで「JavaScriptに対するTypeScriptのような言語が、Pythonにもあるのだろうか？」と思い調べ、 Nim というプログラミング言語を知ることになります。\n軽く触ってみたところ好感触だったのですが、将来的にAWS Lambdaなどで使用することを考えると、ランタイム環境を自前で準備することを考えるとデフォルトで対応されていないと実用は厳しいと考え、それ以上調べることを中断することにしました。\nそして本記事冒頭の話へ\u0026hellip; そして、本記事冒頭の話へ繋がります。\n「そもそも言語で型アノテーションを記述できるなら、それを元にチェックするコマンドがあるのでは？」というところからmypyの存在を知りました。\n次にmypyを触ってみたところ、「いちいちコマンドを実行するのは面倒くさいのでPythonのLinterが無いかな\u0026hellip;」と調べてみたところ、Microsoftが開発している拡張機能Pylanceが対応していることを知りました。\n以上が、本記事冒頭の内容に辿りつくまでの経緯です。\nこれで、Pythonを使用したそこそこ以上の規模の開発に対する心理的ハードルが下がりますね。\n元になったツイート達 Python、ここまで型情報を記述できるならチェックするコマンドを提供してくれないかなと思っていたら、このライブラリを発見した。\n\u0026gt; What is mypy?\n\u0026gt; Mypy is a static type checker for Python.https://t.co/dbkvlLG0Kc\n\u0026mdash; Koki@ITと時々英語の再始動のために動いている人 (@koki_n22) August 20, 2022 VS Code上でPythonの型チェックを自動で行わせる方法がないかなと調べてみたら、このページがヒットした。https://t.co/3qhnmSIMnQ\n\u0026mdash; Koki@ITと時々英語の再始動のために動いている人 (@koki_n22) August 20, 2022 ",
    "ref": "/blog/ja/posts/python/static-python-type-check/"
  },{
    "title": "不在の時間や深夜帯に記憶にない電気利用が発生し、電気利用料が発生している件とその理由について",
    "date": "",
    "description": "本記事では、不在の時間や深夜帯に記憶にない電気利用が発生し、電気利用料が発生している件とその理由について、電力会社に問い合わせてところ判明したので書いています。",
    "body": "この記事では、不在の時間や深夜帯に記憶にない電気利用が発生し、電気利用料が発生している件とその理由について判明したので説明します。\nこの記事の内容です。\n対象読者 契約した電力会社および契約内容 何があったのか 何が原因だったのか 不在時に電気代を安くする方法と注意点 元になったツイート達 対象読者 不在の時間や深夜帯に、使ったことのない・見覚えのない電気利用履歴が残っている謎を解きたい方 契約した電力会社および契約内容 中部電力ミライズ スマートライフプラン ・ 6kVA 30A\n何があったのか 新居で電気を開通してから本格的に引っ越しを行うまでの不在の間に、電気の使用された履歴が残っていた 日々、23~6時の間に、明らかに自分が使ったモノではない量の電気が使用された履歴が残っていた (4.5kWh~21kWh) 何が原因だったのか 新居の電気給湯器が深夜帯に、翌日使う分の湯を沸かして保存していたのが原因。\nこれは、人が生活しているしていない関係なく電気給湯器に電源が入っている間は毎日動作するため、日々電気が使用される。\n本格的に引っ越すまではブレーカーを落としていたが、どうも電気給湯器の電源は主幹電源とは別らしく、こっちはこっちで別で電源を切る必要があった。\nちなみに、使用電気量に幅があるのは、電力会社の方曰く不明とのこと。\n→これはこれで気になるので、どこかで調査し、また記事にしたい。 仲介業者や管理会社も、そこまで説明してくれれば良かったのに\u0026hellip;不法侵入などで電気を盗まれているのかと思った\u0026hellip;\n不在時に電気代を安くする方法と注意点 旅行中など、まとまった日数不在にする場合は主電源から電気給湯器の電源を切ることで電気代の発生を防ぐことが可能。\nただし、電源を落とした数日後に再度電源を入れ稼働させると故障する可能性があるため、事前に管理会社やメーカーに上記のようなことを行っても問題が無いかを確認した方がいいとのこと。\n→故障したら、修理費がうん十万掛かったりするらしい\u0026hellip;\n元になったツイート達 現部屋の電気使用量を確認したけど、自分が本格的に引っ越す前でかつ自分が居なかった時間帯に21kWhも電気が使用されていた。自分の認識だと、本格的な引っ越し前だから日中に荷物を受け取る時以外はブレーカーを落としていたはずなんだが... 何故21kWhも使用されていたんだろう。\n\u0026mdash; Koki@ITと時々英語の再始動準備中な人 (@koki_n22) July 3, 2022 本件と夜間の電気消費量が妙に多い件について電力会社に問い合わせたところ、電気温水器が夜間稼働しているのが原因でした。そして、21kWhの原因は何かが原因で想定より温水器が長時間稼働してしまっていたことが考えられる、とのことでした。なるほど。 https://t.co/UUE94D8M8J\n\u0026mdash; Koki@ITと時々英語の再始動準備中な人 (@koki_n22) July 4, 2022 電気温水器の電気代について、「数日間家を空ける時に電気代が掛からないように止めても大丈夫か？」と聞いたところ「数日後にいきなり再稼働すると故障する可能性があるので、管理会社やメーカに聞いてください。」とのことだった。それはそう。確か、洗濯機が繋がっている水道でも同じことを聞いた。\n\u0026mdash; Koki@ITと時々英語の再始動準備中な人 (@koki_n22) July 4, 2022 ",
    "ref": "/blog/ja/posts/other/chuden-smartlifeplan-midnight-mysterious-electricity-bill/"
  },{
    "title": "海外で購入したWindowsパソコンでやよいの青色申告22をインストールしようとしたらハマった話と解決方法",
    "date": "",
    "description": "この記事では、海外で購入したWindowsパソコンでやよいの青色申告をインストールする際の注意点および解決方法について説明します。インストーラ実行時にファイルをコピーから先へ進まなかった方にも参考になると思います。",
    "body": "この記事では、海外で購入したWindowsパソコンでやよいの青色申告をインストールする際の注意点および解決方法について説明します。\nインストーラ実行時にファイルをコピーが終わった後、エラーメッセージも何も表示されずに先へ進まなかった方にも参考になると思います。\nこの記事の内容です。\n対象読者 環境 原因 解決方法 共通操作 地域の形式を日本語(日本)に変更 Windowsのシステムロケールを日本語(日本)に変更 何故、この問題が発生したのか？ 対象読者 海外 (日本以外) で購入したWindowsパソコンにやよいの青色申告をインストールしたい方 やよいの青色申告のインストーラ実行時、ファイルのコピーが終わった後、何も起こらず困っている方 環境 Windows 11 原因 地域の形式およびWindowsのシステムロケールが日本語(日本) 以外 に設定されているため。\n解決方法 共通操作 コントロールパネルを開きます。\nWindowsマークをクリックした後、「検索するには、ここに入力します」という入力欄に コントロールパネル と入力すると、最も一致する検索結果にコントロールパネルが表示されるのでクリックします。 コントロールパネルが開かれたら、右上の表示方法が カテゴリ になっていることを確認します。\nもしなっていなかったら、カテゴリに設定します。(以降、カテゴリ表示を前提に説明するため。) 右列、上から3つ目、緑色の文字で表示されている 時計と地域 をクリックします。 上から2つ目、緑色の文字で表示されている 地域 をクリックします。 地域の形式を日本語(日本)に変更 地域の画面上部にある 形式 タブをクリックします。 形式タブ上部にある形式(F)の右横が 日本語(日本) に設定されているかを確認します。\nもしされていなかったら、下のボックスから選択します。 Windowsのシステムロケールを日本語(日本)に変更 地域の画面上部にある 管理 タブをクリックします。 上から2つ目のボックス、Unicode 対応ではないプログラムの言語ボックス内にある システム ロケールの変更 (C) をクリックします。 現在のシステムロケールを 日本語(日本) に変更します。 OKをクリックするとWinidowsを再起動するかを聞かれるので、変更した設定内容を反映させるために再起動します。 解決方法は以上です。\nこの後、再度やよいの青色申告のインストーラを起動しインストールすると、うまくいきます。\n何故、この問題が発生したのか？ 弥生会計のサポート窓口に問い合わせたところ\n「日本国内に居る方向けに開発・販売しているので\u0026hellip;」\nとのことでした。\n今回、想定外と思われる環境にてインストールしようとしたので、インストーラからインストールランチャー？を起動する際に問題が発生し、このようなことになったのだと思います。(想像)\n何はともあれ、設定を変更することで使用可能なことがわかって良かったです。\n",
    "ref": "/blog/ja/posts/other/installer-of-yayoiaoiro-did-not-start-normally/"
  },{
    "title": "隣の部屋のモデムからドアや引き戸を超えてLANケーブルを引っ張る方法を考えてみた",
    "date": "",
    "description": "この記事では、隣の部屋のモデムからドアや引き戸を超えてLANケーブルを引っ張る方法を考えてみた結果を書いています。",
    "body": "この記事では、隣の部屋のモデムからドアや引き戸を超えてLANケーブルを引っ張る方法を考えてみた結果を書いています。\nネット回線を契約したのはいいものの、ネット接続をメインで使用する部屋に直接ネット回線をひけなかった結果、有線環境を構築できていない方向けです。\nこの記事の内容です。\n前提条件 必要なもの 配線 LANケーブルのカテゴリ互換性の壁 もし引き戸やドアの下などに広めのすき間がある場合 今回考えてみて 前提条件 隣室のモデムから自室のルータまでの配線を想定 LANケーブルのカテゴリは6を想定\n(今契約しているネット回線の速度上限が1Gbpsな関係でカテゴリ6で充分なため。) 必要なもの 適当なカテゴリ6のLANケーブル\nまずは何はともあれLANケーブル。\nLANケーブルはカテゴリさえ合っていれば、ここらへんの安いのを適当に買ってしまっていいと思います。\n本数は2本必要です。\nエレコム LANケーブル CAT6 3m ツメが折れない 爪折れ防止コネクタ cat6対応 簡易パッケージ RoHS指令準拠 ブルー LD-GPT/BU3/RS\n延長コネクタ\n次に、LANケーブルの延長コネクタです。\nこれは、上記のLANケーブルと、後述する隙間を通すためのすき間用LANケーブルを接続するために使用します。\n個数は2個必要です。\nエレコム CAT6中継コネクタ LD-RJ45JJ6Y2\nすき間用LANケーブル\n最後に、ドアの下や引き戸の隙間を通すためのすき間用LANケーブルです。\nこれは、個数は1個で大丈夫です。\nエレコム LANケーブル 0.4m 隙間 CAT6A準拠 シルバー LD-VAPF6A/SV04\n配線 以下の流れで、モデムからルータまで接続します。\nモデム→\nLANケーブル→\n延長コネクタ→\nすき間用LANケーブル (ここで隣の部屋へ繋ぐ)→\n延長コネクタ→\nLANケーブル→\nルータ\nLANケーブルのカテゴリ互換性の壁 ここまで読んだ方の中から、「今回、カテゴリ6と6Aのものを組み合わせて使用しているが互換性は大丈夫なの？」という心配の声があると思います。\n大丈夫です。\nエレコムに問い合わせたところ、6と6Aは互換性があり、性能が6に引っ張られるが問題なく使用することができるとのことでした。\nもし引き戸やドアの下などに広めのすき間がある場合 もし引き戸やドアの下などに広めのすき間がある場合は、今まで説明した商品などを組み合わせるのではなく、以下のようなフラットタイプのLANケーブルを1本長いのを購入し、直接モデムとルータを接続する方がいいかなと思います。\nサンワサプライ LANケーブル CAT6 フラットタイプ 1Gbps/250MHz ギガビット イーサネットケーブル RJ45コネクタ ツメ折れ防止 (15m) ホワイト LA-FL6-15W\n今回考えてみて ここまで考えてみて、正直、無線LANで運用していて問題無ければ、無理して有線環境を構築する必要はないかなと思いました。\nというのもお金と手間が掛かりますし、何か問題が発生したら \u0026ldquo;どのケーブルで問題が発生しているのか？\u0026rdquo; という問題調査が面倒くさいですし。\nというわけで、私は問題が発生しない限りは無線LANを使用しつづけることに決めました。(これが、\u0026ldquo;実践してみた\u0026rdquo; ではなく \u0026ldquo;考えてみた\u0026rdquo; というタイトルになった理由。)\n",
    "ref": "/blog/ja/posts/network/route-lan-cable-from-next-room/"
  },{
    "title": "HugoブログのOGP画像をコマンド一発で自動生成し、それを自動設定する",
    "date": "",
    "description": "作成するのに手間が掛かるOGP画像を、コマンド一発で自動生成し、それを自動設定する方法について説明します。",
    "body": "この記事では、HugoブログのOGP画像をコマンド一発で自動生成し、それを自動設定する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 OGP画像自動生成のための環境構築 1. 使用するテンプレート画像のダウンロード 2. 使用するフォントのダウンロード 3. Go言語のインストールおよび初期化 4. tcardgenのインストールおよび設定 5. ブログ記事のテンプレートを編集 6. 複数のOGP画像を一気に作成するためにスクリプト化 OGP画像を自動で参照するための設定 本記事の対応を行った際のコミットログ ハマった点 参考にしたページ 対象読者 HugoブログのOGP画像の生成および設定を自動化したい方 環境 WSL 2 (Ubuntu 20.04 LTS) Homebrew Node (v16.13.0) Hugo (v0.94.2+extended linux/amd64 BuildDate=unknown) 前提条件 使用しているテーマはHugo Future Imperfect Slim 指定したOGP画像が存在しない場合は、プロフィール画像をOGP画像として使用 OGP画像自動生成のための環境構築 本セクション内で実行しているコマンドは、すべてプロジェクトのルートディレクトリで行うこと前提です。\n1. 使用するテンプレート画像のダウンロード OGP画像を生成するのに使用するテンプレート画像をダウンロードし配置します。\n今回は 全てのイラスト素材が無料で利用できるサイト イラストボックス さんのものを利用しています。\nダウンロードが終わったら、画像サイズを 1200px * 630px に変更し、static/img/og/ へ /ogp-template.png という名前で保存します。\n今回、画像サイズの変更には Online Image Resizer を使用しました。\n2. 使用するフォントのダウンロード 次に、使用するフォントをダウンロードし配置します。\n今回は参考にしたページを真似し、 HackGen (白源) を使用します。\nダウンロードは以下から。\nGitHub - yuru7/HackGen: Hack と源柔ゴシックを合成したプログラミングフォント 白源 (はくげん／HackGen)\nHack と源柔ゴシックを合成したプログラミングフォント 白源 (はくげん／HackGen). Contribute to yuru7/HackGen development by creating an account on GitHub.\n\u0026nbsp;\rダウンロードが終わったら、 HackGen-Regular.ttf と HackGen-Bold.ttf を static/fonts/hackgen/HackGen へ配置します。\n3. Go言語のインストールおよび初期化 OGP画像の自動生成に使用するライブラリ、tcardgenを使用するのにGo言語をインストールする必要があるのでインストールします。\nコマンドは以下の通りです。\nbrew install go インストールが終わったら、以下のコマンドを実行し初期化しておきます。\ngo mod initの引数には、適当なモジュール名を指定します。\n今回は、他のプログラムから特にモジュールを呼び出さないので、私のブログ環境のリポジトリ名をそのまま指定しています。\ngo mod init env-for-blog 4. tcardgenのインストールおよび設定 以下のコマンドを実行し、tcardgenをインストールします。\ngo get github.com/Ladicle/tcardgen インストールが完了したら、プロジェクトのルートディレクトリに以下の設定ファイル、tcargen.ymlを作成します。\n以下はあくまでも一例なため、自身の好みに合わせていろいろといじってみてください。\ntemplate: static/img/og/ogp-template.png title: fontSize: 65 fontStyle: Bold info: start: pX: 126 pY: 495 fontSize: 30 fontStyle: Regular separator: \u0026#34; - \u0026#34; tags: start: pX: 1100 pY: 495 fontStyle: Regular fontSize: 0 5. ブログ記事のテンプレートを編集 tcardgenを使用しOGP画像を生成するためには、記事へのタグ設定が必須となっています。\n私の環境だとブログ記事のテンプレートにtagsが無かったため、ここで追加しておきます。\n+++ author = \u0026#34;Koki\u0026#34; categories = [\u0026#34;\u0026#34;] tags = [\u0026#34;\u0026#34;] # ←これを追加 date = {{ .Date }} linktitle = \u0026#34;\u0026#34; title = \u0026#34;\u0026#34; description = \u0026#34;\u0026#34; type = \u0026#34;post\u0026#34; draft = true +++ # 以下省略 また、tagsの設定内容が空だとOGP画像生成時にエラーが発生し生成できないため、必ず設定するようにしましょう。\n6. 複数のOGP画像を一気に作成するためにスクリプト化 ここまできたら、tcardgenコマンドを実行しOGP画像を自動生成できるようになります。\nコマンド例は\ntcardgen \\ --fontDir [フォントファイルが存在するディレクトリパス] \\ --outDir [生成したOGP画像ファイルの出力先] \\ --template [OGP画像生成に使用するテンプレート画像のパス] \\ --config tcargen.yml \\ [生成対象記事ファイルのパス] で、本記事のOGP画像を生成する時のコマンドは以下になります。\ntcardgen \\ --fontDir static/fonts/hackgen/HackGen \\ --outDir static/img/og \\ --template static/img/og/ogp-template.png \\ --config tcargen.yml \\ content/post/hugo/generate-og-image-automatically.ja.md ただ、これだと複数記事に対応できないため、スクリプト化しておきます。\n私が実際に使用しているスクリプトは以下の通りです。\nconst fs = require(\u0026#34;fs\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const { execSync } = require(\u0026#34;child_process\u0026#34;); const fontDir = \u0026#34;static/fonts/hackgen/HackGen\u0026#34;; const outputDir = \u0026#34;static/img/og\u0026#34;; const configFilePath = \u0026#34;tcargen.yml\u0026#34;; for (let i = 2; i \u0026lt; process.argv.length; i++) { const filePath = path.join(__dirname, process.argv[i]); if (fs.existsSync(filePath)) { const commandStr = `~/go/bin/tcardgen --fontDir ${fontDir} --output ${outputDir} --config ${configFilePath} ${filePath}`; execSync(commandStr); console.info(`${process.argv[i]} completed`); } else { console.error(`\\x1b[31m${filePath} was not found.`); } } 引数として渡された記事ファイルの分、tcardgenコマンドを実行します。\n本スクリプトは以下のように使用することができます。\nnode gen-ogp-image.js content/post/hugo/generate-og-image-automatically.ja.md content/post/hugo/generate-og-image-automatically.md OGP画像を自動で参照するための設定 最後に、自動生成したOGP画像を自動で参照するための設定を行います。\n使用しているテーマであるHugo Future Imperfect Slimのメタタグ設定箇所は layouts/partials/meta.html なため、このファイルを触っていきます。\n該当箇所は\n{{- with or (.Params.openGraph) (.Params.images) -}} {{ range . }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .src | absURL }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image:alt\u0026#34; content=\u0026#34;{{ .alt }}\u0026#34;\u0026gt; {{- end -}} {{ else }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .Site.Params.intro.pic.src | absURL }}\u0026#34;\u0026gt; {{ end }} なのですが、何故かテーマディレクトリ配下のサンプルサイトを元に設定しても .src を参照できないとエラーを吐かれたので、以下の様に独自処理に書き換えました。\n{{ $ogImagePathBase := printf \u0026#34;/img/og/%s.png\u0026#34; .File.BaseFileName }} {{ $ogImagePathForCheckExists := printf \u0026#34;/static%s\u0026#34; $ogImagePathBase }} {{ if fileExists $ogImagePathForCheckExists }} {{ $ogImagePath := printf \u0026#34;/blog%s\u0026#34; $ogImagePathBase }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ $ogImagePath | absURL }}\u0026#34;\u0026gt; {{ else }} \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .Site.Params.intro.pic.src | absURL }}\u0026#34;\u0026gt; {{ end }} \u0026lt;meta property=\u0026#34;og:image:alt\u0026#34; content=\u0026#34;The Open Graph logo\u0026#34;\u0026gt; static/img/og/配下に記事ファイル名と同じ名前のpngファイルが存在していたらそれをOGP画像として使用し、そうでなければサイトプロフィールの画像をOGP画像として使用しています。\naltは、とりあえず The Open Graph logo としておけばよさそうだったので、固定にしています。\n本記事の対応を行った際のコミットログ 全体的に何をどのように触ったのかを確認したい方向けに、コミットログやファイル変更情報をおいておきます。\nPull request Files changed: 8 generate an ogp image automatically\nPull request Files changed: 8 generate an ogp image automatically 2\nハマった点 Go言語をインストールする際にapt-getコマンドを使用したところ、インストールされたバージョンが古くtcardgenインストール時に以下のエラーが発生しました。\n# cd .; git clone -- https://gopkg.in/yaml.v2 /home/koki-n/go/src/gopkg.in/yaml.v2 Cloning into \u0026#39;/home/koki-n/go/src/gopkg.in/yaml.v2\u0026#39;... fatal: unable to access \u0026#39;https://gopkg.in/yaml.v2/\u0026#39;: server certificate verification failed. CAfile: none CRLfile: none package gopkg.in/yaml.v2: exit status 128 package github.com/pelletier/go-toml/v2: cannot find package \u0026#34;github.com/pelletier/go-toml/v2\u0026#34; in any of: /usr/lib/go-1.13/src/github.com/pelletier/go-toml/v2 (from $GOROOT) /home/koki-n/go/src/github.com/pelletier/go-toml/v2 (from $GOPATH) apt-getコマンドでインストールすると最新安定版ではない古いバージョンのものがインストールされることが多々あるため、許されるならば可能な限りHomebrewを使用するなど、別ルートでライブラリをインストールした方が良いと思います。\n参考にしたページ [Hugo] tcardgen を使って OGP 画像を自動生成する\nhttps://github.com/Ladicle/tcardgenLadicle/tcardgen\n",
    "ref": "/blog/ja/posts/hugo/generate-og-image-automatically/"
  },{
    "title": "Hugoサーバをローカルで起動している時のみGoogle Analyticsを無効にする",
    "date": "",
    "description": "この記事では、Hugoサーバをローカルで起動している時のみGoogle Analyticsを無効にする方法を説明します。これによって、ローカルの確認によりAnalytics情報が汚れることがなくなります。",
    "body": "この記事では、Hugoサーバをローカルで起動している時のみGoogle Analyticsを無効にする方法を説明します。\nこれによって、ローカルの確認によりAnalytics情報が汚れることがなくなります。\nこの記事の内容です。\n対象読者 環境 前提条件 localhost上でのみGoogle Analyticsを無効にする 1. Google Analyticsのテンプレートを読み込んでいる個所を把握する 2. localhost上ではGoogle Analyticsを読み込まないように変更する 参考にしたページ 対象読者 Hugoブログ上で、本番環境でのみGoogle Analyticsを有効にしたい方 環境 Hugo (v0.94.2+extended linux/amd64 BuildDate=unknown) 前提条件 Hugoインストール済 localhost上でのみGoogle Analyticsを無効にする 1. Google Analyticsのテンプレートを読み込んでいる個所を把握する まずは、Google Analyticsのテンプレートを読み込んでいる個所を探します。\n自分の場合は layouts/partials/scripts.html が対象でしたが、お使いのテーマによって異なると思いますので、以下のようなコマンドを実行し、それぞれ探したほうがいいと思います。\ngrep \u0026#39;{{- template \u0026#34;_internal/google_analytics_async.html\u0026#34; . -}}\u0026#39; -rl . 2. localhost上ではGoogle Analyticsを読み込まないように変更する 次に、以下のように該当箇所を変更します。\n{{- template \u0026#34;_internal/google_analytics_async.html\u0026#34; . -}} {{ if .Site.IsServer }} \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; console.info(\u0026#34;Disable Google Analytics on Localhost\u0026#34;); \u0026lt;/script\u0026gt; {{ else}} {{- template \u0026#34;_internal/google_analytics_async.html\u0026#34; . -}} {{ end }} 今回は、ローカルでHugoサーバを起動している時にはコンソールにメッセージを表示するようにしました。\n行っていることは簡単で、.Site.IsServer変数がサーバがローカルで起動しているかどうかのフラグを管理しているため、それを利用して条件分岐をしているだけです。\n参考にしたページ How to Exclude Google Analytics When Running Under Hugo Local Server\n",
    "ref": "/blog/ja/posts/hugo/disable-google-analytics-on-local/"
  },{
    "title": "Google Colabで書いたコードをGitHubで管理する方法",
    "date": "",
    "description": "",
    "body": "この記事では、Google Colabで書いたコードをGitHubで管理する方法を説明します。\nローカルに環境構築をせずに開発をしつつ、そのコードを管理したい人向けの内容となっています。\nパブリックリポジトリ、プライベートリポジトリ両方を対象としています。\nこの記事の内容です。\n対象読者 環境 前提条件 共通の下準備 パブリックリポジトリを使用 1. Gitアカウント設定 2. Gitパブリックリポジトリをclone 3. コードのcommitおよびpush プライベートリポジトリを使用 1. GitHub側でPersonal access tokens作成 2. Gitアカウント設定 3. Gitプライベートリポジトリをclone 4. コードのcommitおよびpush 実際やってみての感想 対象読者 Google Colabで書いたコードをGitHubで管理したい方 環境 Google Colab 前提条件 GitHubアカウント作成済み 共通の下準備 Google Colabのプロジェクトを作成する Google Driveをマウントする\n2は、cloneしたモノを保存するために必須です。\n方法は、このページがわかりやすかったのでこちらを参照してください。\n【Google Colaboratory】2通りのGoogleドライブのマウント方法 パブリックリポジトリを使用 パブリックリポジトリを使用する際は簡単で、それぞれ以下の流れで設定したりcloneするだけです。\n1. Gitアカウント設定 pushを行えるようにするため、以下のコードブロックを作成し実行します。\nメールアドレスとユーザ名は、お使いのものに置き換えてください。\n!git config --global user.email \u0026#34;メールアドレス\u0026#34; !git config --global user.name \u0026#34;ユーザ名\u0026#34; 2. Gitパブリックリポジトリをclone 以下のコードブロックを作成し、実行します。\n[リポジトリURL]は、対象のものに置き換えてください。\n%cd /content/drive/MyDrive/Colab Notebooks !git clone [リポジトリURL] 3. コードのcommitおよびpush Google Colab外で行う方法とほぼ同じです。\n以下のコードブロックを作成し、実行します。(addやcommit、pushの対象はお好みで。)\n!git add . !git commit -m \u0026#34;コミットメッセージ\u0026#34; !git push origin main プライベートリポジトリを使用 プライベートリポジトリを使用する際は、Personal access tokenを利用して認証を行う必要があるため、手順が変わってきます。\n1. GitHub側でPersonal access tokens作成 以下の手順で、Personal access tokensを作成します。\nこれは、\nGitHubにサインイン ページ右上のアイコンから、Settingsをクリック 左側メニュー一番下のDeveloper settingsをクリック 左側メニュー一番下のPersonal access tokensをクリック Generate new tokenをクリックし、Personal access tokensを作成 作成されたtokenをコピー (後ほど使用するため。) 2. Gitアカウント設定 pushを行えるようにするため、以下のコードブロックを作成し実行します。\nメールアドレスとユーザ名は、お使いのものに置き換えてください。\n!git config --global user.email \u0026#34;メールアドレス\u0026#34; !git config --global user.name \u0026#34;ユーザ名\u0026#34; 3. Gitプライベートリポジトリをclone 以下のコードブロックを作成し、実行します。\n[Personal access tokens]は、先ほどコピーしたものを、\n[GitHubアカウント名]と[リポジトリ名]は、使用しているものや対象のものに置き換えてください。\n!git clone リポジトリURL %env TOKEN=[Personal access tokens] %cd /content/drive/MyDrive/Colab Notebooks !git clone https://$$TOKEN@github.com/[GitHubアカウント名]/[リポジトリ名].git 4. コードのcommitおよびpush Google Colab外で行う方法とほぼ同じです。\n以下のコードブロックを作成し、実行します。(addやcommit、pushの対象はお好みで。)\n!git add . !git commit -m \u0026#34;コミットメッセージ\u0026#34; !git push origin main ",
    "ref": "/blog/ja/posts/python/google-colab-with-github/"
  },{
    "title": "Hugoの記事URLを/content/以下のディレクトリ構造と一緒にする",
    "date": "",
    "description": "この記事では、記事URL/content/以下のディレクトリ構造と一緒にする方法を説明します。",
    "body": "この記事では、記事URL/content/以下のディレクトリ構造と一緒にする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 Hugoアップデート configファイルへ設定追加 サンプル 参考にしたページ 対象読者 記事をディレクトリ毎に分け、かつURLの形式をそれに追従させたい方 環境 WSL 2 (Ubuntu 20.04 LTS) Hugo Homebrew 前提条件 Hugoインストール済 Homebrewインストール済 Hugoアップデート Hugoのバージョンが0.83.0以降の方は、本セクションは無視してconfigファイルへ設定追加を読んでください。\n今回設定ファイルに追加する属性はバージョン0.83.0から追加されたため、バージョンアップが必須になります。\n今回はapt-getにてHugoをインストールしてしまっていたため、まずはアンインストールし、その後にHomebrewでインストールしなおします。\n理由は、apt-getだとインストール可能な最新バージョンが0.64.0と古いためです。\n再インストール時のコマンドの流れは下記の通りです。\nsudo apt-get remove -y hugo brew update brew install hugo brew update実行時に\nerror: Failed to merge in the changes と表示されてしまった方は、brew update-reset を実行した後、念のため、再度 brew update を実行してください。\nconfigファイルへ設定追加 config.tomlの[permalinks]セクションを、以下のように変更します。\n[permalinks] posts = \u0026#34;/:year/:month/:day/:filename/\u0026#34; # 変更前 posts = \u0026#34;/:sections/:filename\u0026#34; # 変更後 変更前の値は、あくまでも一例です。\nあと、上記はconfigファイルの形式がtomlだった場合です。他の形式については、 Hugo: URL Management を参考にしてください。\nサンプル 以下に本ブログの設定を行った際のコミットログを置いておきますので、参考にどうぞ。\norganizing the posts\n参考にしたページ Install Hugo | Hugo: Homebrew (macOS)\nHomebrew 警告への対処（Another active Homebrew update process is already in progress）\nSection content not showing\n",
    "ref": "/blog/ja/posts/hugo/organizing-hugo-posts/"
  },{
    "title": "brew updateを実行した時にerror: Failed to merge in the changesというエラーが表示された時の対処法",
    "date": "",
    "description": "この記事では、brew updateを実行した時にerror: Failed to merge in the changesというエラーが表示され、Homebrewの更新に失敗した時の対処法について説明します。",
    "body": "この記事では、brew updateを実行した時にerror: Failed to merge in the changesというエラーが表示され、Homebrewの更新に失敗した時の対処法について説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 brew update-resetを実行 brew update-resetって何をしているの？ 参考にしたページ 対象読者 brew update実行時に発生したエラーを突破し、Homebrewの更新を行いたい方 環境 WSL 2 (Ubuntu 20.04 LTS) 前提条件 Homebrewインストール済 brew update-resetを実行 brew update-reset を実行するだけで解決できます。\nbrew update-resetって何をしているの？ Homebrew公式および公式以外のリモートリポジトリ情報を一旦リセットした後に再取得し、設定しなおしています。\n参考にしたページ Homebrew Documentation: update-reset install brew error error: Failed to merge in the changes.\n",
    "ref": "/blog/ja/posts/homebrew/homebrew-update-failed-to-merge-in-the-changes/"
  },{
    "title": "Hugoサイトへのrobots.txt作成および追加",
    "date": "",
    "description": "この記事では、Hugoで生成するサイトへのrobots.txt作成および追加を行う方法を説明します。",
    "body": "この記事では、Hugoで生成するサイトへのrobots.txt作成および追加を行う方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 configファイルに設定を追加 layoutsディレクトリ配下にrobots.txtを作成 サンプル 参考にしたページ 対象読者 Hugoで生成したサイトへrobots.txtを追加したい方 環境 Hugo (v0.94.2+extended linux/amd64 BuildDate=unknown) 前提条件 Hugoインストール済 configファイルに設定を追加 configファイル内のトップレベルに以下を追加します。\n私の環境だと、configファイルがtoml形式だったので、以下を追加しています。\nenableRobotsTXT = true もし手元のconfigファイルがyaml形式であれば下記を、\nenableRobotsTXT: true json形式であれば下記をトップレベルに追加してください。\n\u0026#34;enableRobotsTXT\u0026#34;: true これだけで、内容が\nUser-agent: * のrobots.txtが生成されるようになります。\nlayoutsディレクトリ配下にrobots.txtを作成 実際はサイトマップ情報などをrobots.txtに追加したいので、カスタマイズしたくなります。\nその時は、/layoutsディレクトリ配下にrobots.txtを追加するだけでビルド時に生成してくれるようになります。\nサンプル 以下に本ブログの設定を行った際のコミットログを置いておきますので、良かったら参考にどうぞ。\nadd robots.txt\n参考にしたページ Hugo: Robots.txt File\n",
    "ref": "/blog/ja/posts/hugo/add-robots-txt-to-hugo-site/"
  },{
    "title": "Jestのインストール方法およびインテリセンスなどの設定方法について",
    "date": "",
    "description": "この記事では、JavaScriptのテストフレームワークであるJestのインストール方法、インテリセンスなどの設定方法について説明します。",
    "body": "[2022/03/17更新] インテリセンス設定時のインストールコマンドが間違っていたので修正。\nこの記事では、JavaScriptのテストフレームワークであるJestのインストール方法、インテリセンスなどの設定方法について説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 Jestのインストール 便利に使うための設定 インテリセンス import時のエラー解消 余談 何故Jestを選んだのか？ なぜnpmとyarnを使い分けているのか？ 参考にしたページ 対象読者 Jestの利用環境を構築したい方 環境 Windows 10 (Ver. 21H2, Build. 19044.1526) WSL 2 (Ubuntu 20.04 LTS) Visual Studio Code 前提条件 npmおよびyarnインストール済 Jestのインストール npm install --save-dev jest 便利に使うための設定 インテリセンス まずは、以下のコマンドでJestの型定義をインストールします。\nnpm install --save-dev @types/jest 次に、プロジェクトのルートディレクトリに以下のファイルを jsconfig.json という名前で作成します。\n{ \u0026#34;typeAcquisition\u0026#34;: { \u0026#34;include\u0026#34;: [ \u0026#34;jest\u0026#34; ] } } import時のエラー解消 このままではJestのテストファイル内でテスト対象をimportをした時に参照できずエラーが発生するので、対応するためにbabel環境を構築する必要があります。\n最初に、以下のコマンドでbabelをインストールします。\nyarn add --dev babel-jest @babel/core @babel/preset-env 次に、プロジェクトのルートディレクトリに以下のファイルを babel.config.cjs という名前で作成します。\nmodule.exports = { presets: [ [ \u0026#34;@babel/preset-env\u0026#34;, { targets: { node: \u0026#34;current\u0026#34;, }, }, ], ], }; 余談 何故Jestを選んだのか？ ざっくり、以下の3つの理由からです。\nnpmでのダウンロード数が圧倒的に多い(利用者数が多い) ため、何かあっても情報を得やすい。 環境構築が簡単。 様々なライブラリやフレームワークに対応している。 なぜnpmとyarnを使い分けているのか？ 正直なところ、昨今のnpmの改良具合を見ているとパフォーマンスなどの差はどんどん縮まってきているのでNode.js公式パッケージマネージャーであるnpmのみを使っておいた方が安心安全だと思います。\nが、今回の場合はbabel周りがyarnでしかインストールできなかったため、渋々使っています。\n本当はnpmだけで統一したかった\u0026hellip;\n参考にしたページ Jestの設定\nnpm trends (chai vs cypress vs jasmine vs jest vs mocha)\n",
    "ref": "/blog/ja/posts/javascript/install-and-setting-jest/"
  },{
    "title": "Google Play ストアからダウンロードしたAndroidアプリのログを取得 (Windows使用)",
    "date": "",
    "description": "この記事では、Google Play ストアからダウンロードしたAndroidアプリのログを取得する方法について説明します。",
    "body": "この記事では、Google Play ストアからダウンロードしたAndroidアプリのログを取得する方法について説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 ログを取得できるようにするための準備を行う AndroidデバイスのUSBデバッグを有効にする Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする ログを取得する 注意点 そもそも、何故こんなことをしようと思ったのかの経緯 (余談) 参考にしたページ 対象読者 何かしらの理由でGoogle Play ストアからダウンロードしたアプリのログを取得したい方 環境 Pixel 6 (Android 12, Build. SQ1D.220205.004) Windows 10 (Ver. 21H2, Build. 19044.1526) 前提条件 なし\nログを取得できるようにするための準備を行う AndroidデバイスのUSBデバッグを有効にする [設定] \u0026gt; [デバイス情報]に移動し、一番下にある ビルド番号 を開発者向けオプションがオンになるまで連打する。 [設定] \u0026gt; [システム] \u0026gt; [開発者向けオプション]に移動し、 USB デバッグ をオンにする。 Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする SDK Platform-Tools リリースノート の SDK Platform-Tools for Windows をダウンロード をクリックする。 表示される利用規約に同意した後に ダウンロードする: Android SDK Platform-Tools (Windows用) をクリックし、任意の場所にzipファイルをダウンロードする。 2でダウンロードしたzipファイルを解凍する。 コマンドプロンプトを開き、3で解凍してできたフォルダ内のplatform-toolsフォルダへ移動する。 adb devices を実行し、以下の内容が表示され正常に動作していることを確認する。 * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached ログを取得する Windows PCとAndroidスマホをUSB Type-Cケーブルなどで接続する。 Windows PC側でコマンドプロンプトから \u0026ldquo;Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする\u0026quot;の4と5 を実行し、何かしらのデバイス情報が表示されることを確認しておく。 続けて adb logcat *:# を実行し、コマンドプロンプト上でログがリアルタイムで流れることを確認する。\n上記の # は、以下のいずれかを指定する。 値 説明 V Verbose (すべてのログ、デフォルト値) D Debug (デバッグログ) I Info (情報ログ) W Warn (エラーレベルではない警告ログ) E Error (致命的ではないエラーのログ) F Fatal (致命的なエラーのログ) ここでもしログが流れなかったら、Androidスマホ側で USB デバッグを許可しますか？ というダイアログが表示されていないか確認し、表示されていたら右下の 許可 をタップする。\n注意点 Android側でUSB デバッグをオンにしっぱなしにしていると、アプリによっては正常に動作しないことがあるのでログ取得が終わったらオフにした方がいいです。\nそもそも、何故こんなことをしようと思ったのかの経緯 (余談) 購入した有料アプリがPixel 6で起動時に勝手に終了される問題について、リリース元にこちらの環境情報とセットで問い合わせた結果\n「こちらの同じ環境では再現しない。」「原因がわからず対応できない。」と回答がきた。 正常に動作しているエビデンスが欲しいと問い合わせてもスルーされた。 といったところから、「これ、Pixel 6もしくはOS依存の問題に思えるけど、ちゃんと調査していないのでは？」と疑い始めたのがキッカケです。\nちなみに実際にログを確認したところ、アプリ起動時のファイルアクセスに失敗しFatal errorを吐いてアプリが落ちていました。\n参考にしたページ Collecting Logs from Android Devices (2960948)\n",
    "ref": "/blog/ja/posts/android/collecting-logs-from-released-android-app/"
  },{
    "title": "VS Codeで特定言語のみ自動フォーマット機能を無効にする (Prettier使用)",
    "date": "",
    "description": "この記事では、Visual Studio Code (VS Code)で特定言語のみ自動フォーマット機能を無効 (オフ)にする方法を説明します。",
    "body": "この記事では、Visual Studio Code (VS Code)で特定言語のみ自動フォーマット機能を無効 (オフ)にする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 setting.jsonを編集 1. setting.jsonを開く 2. 特定言語の自動フォーマット機能をオフに設定する 参考にしたページ 対象読者 使用する言語によって、自動フォーマットを使う・使わないを切り替えたい方 環境 Visual Studio Code 前提条件 Prettierインストール済み (Prettierは拡張機能) setting.jsonを編集 1. setting.jsonを開く お使いのOSがWindowsの場合はCtrl + Shift + Pを、Macの場合はCommand + Shift + Pを同時押しし、その後、Preferences: Open Settings(JSON)(日本語化済みなら基本設定:　設定(JSON)を開く)を選択します。\n2. 特定言語の自動フォーマット機能をオフに設定する \u0026#34;[言語名]\u0026#34;: { ... }, となっているセクションに、\n\u0026#34;editor.formatOnSave\u0026#34;: false を追加します。\n以下の例は、markdownファイル編集時のみ自動フォーマットをオフにする設定です。\n\u0026#34;[markdown]\u0026#34;: { \u0026#34;editor.formatOnSave\u0026#34;: false }, もし特定言語のセクションが存在しない場合は、自分で追加することも可能です。\nキーに設定可能な言語名は、以下のVS Code公式ページから確認することが可能です。\nLanguage Identifiers#Known language identifiers\n以上で設定は終了です。\n参考にしたページ prettier / prettier-vscode\n",
    "ref": "/blog/ja/posts/visual-studio-code/ignore-auto-formatting-specific-language/"
  },{
    "title": "WSL2 (Ubuntu 20.04) 上でVS Codeを使用したHaskell開発環境を構築する方法",
    "date": "",
    "description": "この記事では、WSL2 (Ubuntu 20.04) 上でVS Codeを使用したHaskell開発環境を構築する方法を説明します。また、VS Codeで使用する拡張機能についても説明しています。",
    "body": "この記事では、WSL2 (Ubuntu 20.04) 上でVS Codeを使用したHaskell開発環境を構築する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 開発環境構築 1. インストール 2. プロジェクト作成 3. プロジェクトをビルド可能にするための準備 4. インストールおよび環境構築に成功したことの確認 5. VS Codeの拡張機能インストール 参考にしたページ 対象読者 WSL2 (Ubuntu 20.04) 上で、VS Codeを使用したHaskell開発環境を構築したい方 環境 Windows 10 (Ver. 21H2, Build. 19044.1526) WSL 2 (Ubuntu 20.04 LTS) 前提条件 WSL 2の環境構築済み WSL 2へVS Codeインストール済み 開発環境構築 1. インストール wget -qO- https://get.haskellstack.org/ | sh 2. プロジェクト作成 stack new [your project name] 3. プロジェクトをビルド可能にするための準備 cd [your project name] stack setup stack build 4. インストールおよび環境構築に成功したことの確認 stack exec [your project name]-exe 以下のようにsomeFuncと表示されたら、インストールおよび環境構築に成功しています。\n$ stack exec [your project name]-exe someFunc 5. VS Codeの拡張機能インストール 最後に、VS Codeを起動し以下の拡張機能をインストールします。\nHaskell\n一緒にHaskell Syntax Highlightingもインストールされます。 hlint\n一緒にhaskell-linterもインストールされます。 以上で、Haskellの開発環境構築は完了です。\n参考にしたページ Install/upgrade - The Haskell Tool Stack\n",
    "ref": "/blog/ja/posts/haskell/setup-haskell-dev-env-on-wsl2/"
  },{
    "title": "WindowsでGoogle Driveをアンインストールする時に「Googleドライブが使用中です。終了してからアンインストールしてください」と言われた時の対処法",
    "date": "",
    "description": "本記事では、WindowsでGoogle Driveをアンインストールする時に「Googleドライブが使用中です。終了してからアンインストールしてください」と言われた時の対処法を説明します。コマンド一発で対処する方法も載せています。",
    "body": "この記事では、WindowsでGoogle Driveをアンインストールする時に「Googleドライブが使用中です。終了してからアンインストールしてください」と言われた時の対処法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 原因 Google Driveアプリを終了させる方法 手動で行う方法 コマンド一発で行う方法 対象読者 WindowsでGoogle Driveをアンインストールする時にメッセージが表示され邪魔された方 環境 Windows 10 前提条件 なし\n原因 表示されるメッセージの通り、Google Driveアプリが起動されているせいです。\n空気を読んで、自分で自分を終了させてくれりゃいいのに。\nGoogle Driveアプリを終了させる方法 手動で行う方法 以下の流れで作業を行います。\nctrl, shift, escキーを同時押しし、タスクマネージャーを起動します。 「プロセス」タブを開きます。 「バックグラウンドプロセス」一覧から「Google Drive」を右クリックし、「タスクの終了」をクリックします。(表示されている複数のGoogle Driveに対して行います。) コマンド一発で行う方法 Windows Powershellを起動し、以下のコマンドを実行し、数秒待ちます。\ntaskkill /F /IM GoogleDriveFS.exe 上記を行った後、Google Driveをアンインストールできるようになります。\n",
    "ref": "/blog/ja/posts/google-drive/uninstall-google-drive-app-on-windows/"
  },{
    "title": "Windowsにpyenvをインストールする方法 (Chocolatey使用)",
    "date": "",
    "description": "WindowsでChocolateyを使用し、pyenvをインストールする方法を説明します。",
    "body": "この記事では、WindowsでChocolateyを使用し、pyenvをインストールする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 インストール 1. インストールコマンド実行 2. 環境変数設定 3. インストールされたことを確認 余談 対象読者 Windowsにpyenvをインストールしたい方 環境 Windows 10 前提条件 Chocolateyインストール済み\nインストール方法はWindows 10でパッケージマネージャ(Chocolatey)を使用する方法を参照。 インストール 1. インストールコマンド実行 以下のコマンドをPowershellコンソール上で実行します。\nchoco install pyenv-win 2. 環境変数設定 以下、2つのパスを環境変数Pathへ追加します。\n%USERPROFILE%\\.pyenv\\pyenv-win\\bin\r%USERPROFILE%\\.pyenv\\pyenv-win\\shims 3. インストールされたことを確認 最後に、Powershell コンソールで\npyenv --version を実行し、以下のようにバージョン情報が表示されたらインストール完了です。\npyenv 1.2.22-47-g4c302a02 余談 環境変数Pathの設定は\nSETX PATH \u0026#34;%PATH%;%USERPROFILE%\\.pyenv\\pyenv-win\\bin;%USERPROFILE%\\.pyenv\\pyenv-win\\shims\u0026#34; をPowershellコンソール上で実行しても行うことができます。が、これを行う時に環境変数の値の合計文字数が1024文字を超えていると、警告: 保存されたデータは 1024 文字に切り捨てられました。と表示され、環境変数Pathの値の一部が吹っ飛ぶので気を付けましょう。 筆者は一度Pathの一部を吹っ飛ばしましたが、幸い、直前にPathの値すべてをテキストエディタに貼り付けていたため、事なきを得ました。\n",
    "ref": "/blog/ja/posts/python/install-pyenv-to-windows/"
  },{
    "title": "Windowsでコマンドを使用し環境変数を永続的に設定する方法",
    "date": "",
    "description": "Windowsでコマンドを使用し環境変数を永続的に設定する方法を説明します。これによって、PC・パソコンを再起動しても設定が消えないように、残るようになります。",
    "body": "この記事では、Windows でコマンドを使用し環境変数を永続的に設定する方法を説明します。\nこれによって、いちいちシステムのプロパティ画面を開かなくても、コマンド一発で環境変数を設定できるようになります。\nまた、環境変数の設定が必要なインストール作業をスクリプト化することもできるようになります。\nこの記事の内容です。\n対象読者 環境 前提条件 設定するためのコマンド ユーザ環境に設定 システム環境に設定 参考にさせていただいたページ 対象読者 Windows の環境変数を設定するために、いちいちシステムのプロパティを開きたくない方 環境 Windows 10 前提条件 無し\n設定するためのコマンド SETX コマンドを使用します。\n以下は、TESTという変数名で、test variable valueという値を設定する例です。\nユーザ環境に設定 SETX TEST \u0026#34;test variable value\u0026#34; システム環境に設定 以下のコマンドは、必ず Powershell を管理者権限で起動し実行する必要があります。\nSETX /M TEST \u0026#34;test variable value\u0026#34; 参考にさせていただいたページ setx | Microsoft Docs\n",
    "ref": "/blog/ja/posts/windows/setting-environment-variable-permanently/"
  },{
    "title": "WSL (Ubuntu 18.04 LTS)へpyenvおよびPythonをインストールする方法",
    "date": "",
    "description": "この記事では、WSL (Ubuntu 18.04 LTS)へpyenvおよびpyenvを使用してPythonをインストールする方法を説明します。",
    "body": "この記事では、WSL (Ubuntu 18.04 LTS)へpyenvおよびpyenvを使用してPythonをインストールする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 pyenvインストール Pythonインストール Pythonをインストールするために必要なライブラリをインストール Pythonをインストール 参考にさせていただいたページ 対象読者 WSLへpyenvとPythonをインストールしたい方 環境 WSL (Ubuntu 18.04 LTS) 前提条件 Gitインストール済み。 pyenvインストール 以下のコマンドを実行してpyenvをインストールします。\ngit clone https://github.com/pyenv/pyenv.git ~/.pyenv echo \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026#39;export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile echo -e \u0026#39;if command -v pyenv 1\u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then\\n eval \u0026#34;$(pyenv init -)\u0026#34;\\nfi\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile exec \u0026#34;$SHELL\u0026#34; コマンドの実行が終わったら、設定を反映させるためにWSLを再起動します。\nこれで、pyenvのインストールは完了です。\nPythonインストール Pythonをインストールするために必要なライブラリをインストール 以下のコマンドを実行します。\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev Pythonをインストール 以下のコマンドを実行し、その後、使用するPythonのバージョンを設定します。\n本記事では、バージョン3.8.2をインストールします。\npyenv install 3.8.2 pyenv global 3.8.2 参考にさせていただいたページ GitHub - pyenv/pyenv: Simple Python version managementxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/python/installing-pyenv-pyenv-on-wsl-ubuntu1804/"
  },{
    "title": "埋め込みVimeo動画をJavaScriptで操作するサンプルコード",
    "date": "",
    "description": "埋め込みVimeo動画をJavaScriptで操作するサンプルコードについて説明します。",
    "body": "この記事では、埋め込みVimeo動画をJavaScriptで操作するサンプコードについて説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 JavaScriptでVimeo動画を操作する HTMLファイルに埋め込み用Vimeo動画を読み込む 各HTML用のJavaScriptファイルを作成する Vimeoビデオを操作する機能のJavaScriptファイルを作成する サンプルコード 参考にさせていただいたページ 対象読者 JavaScriptで埋め込みVimeo動画を操作したい方 環境 JavaScript (ES2015) 前提条件 なし\nJavaScriptでVimeo動画を操作する HTMLファイルに埋め込み用Vimeo動画を読み込む 最初に、埋め込み用Vimeo動画をiframeを使用して読み込みます。\nこの記事では、サンプルのVimeo動画を使用しています。\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;./javascript/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- Specific your video URL on src attribute. --\u0026gt; \u0026lt;iframe id=\u0026#34;sample-player\u0026#34; src=\u0026#34;https://player.vimeo.com/video/76979871\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;360\u0026#34; frameborder=\u0026#34;0\u0026#34; webkitallowfullscreen mozallowfullscreen allowfullscreen allow=\u0026#34;autoplay\u0026#34; \u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button id=\u0026#34;play-button\u0026#34;\u0026gt;play\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;pause-button\u0026#34;\u0026gt;pause\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;play-pause-button\u0026#34;\u0026gt;play and pause\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 各HTML用のJavaScriptファイルを作成する もし、各HTML用にJavaScriptファイルを作成しない方なら、この内容は読み飛ばしてください。\n次に、各HTML用にJavaScriptファイルを作成し、埋め込みVimeo動画を操作するためのJavaScriptファイルを読み込みます。\nここで読み込んでいるJavaScriptファイルについては、次の章で説明します。\nimport * as vimeo from \u0026#39;./vimeo-api-practice.js\u0026#39;; window.onload = () =\u0026gt; { let playerInformation = new vimeo.PlayerInformation( \u0026#39;player\u0026#39;, { playButtonId: \u0026#39;play-button\u0026#39;, pauseButtonId: \u0026#39;pause-button\u0026#39;, playPauseButtonId: \u0026#39;play-pause-button\u0026#39; } ); vimeo.settingPlayer(playerInformation); } Vimeoビデオを操作する機能のJavaScriptファイルを作成する 最後に、Vimeoビデオを操作する機能のJavaScriptファイルを作成します。\n最初に、Vimeo APIを読み込みます。「何故このファイルでAPIを読み込むのか？」については、本ファイルを独立した機能として扱えるようにしたかったからです。\n次に、動画プレーヤーのidと操作するボタンの各idを呼び出し元から受け取り、それらのDOM要素にイベントを設定します。\nこの章では動画再生と一時停止のみしか行っていませんが、他の操作も行えます。もし他の操作を行いたい場合は、公式リファレンスを参考にしてください。\n本記事のコードはGitHubで公開していますので、必要な方はご自由にお使いください。\nlet tag = document.createElement(\u0026#39;script\u0026#39;); tag.src = \u0026#39;https://player.vimeo.com/api/player.js\u0026#39;; document.getElementsByTagName(\u0026#39;head\u0026#39;)[0].appendChild(tag); export function settingPlayer(playerInformation) { let iframe = document.getElementById(playerInformation.playerId); let player = new Vimeo.Player(iframe); // Setting play the video by play button. document.getElementById(playerInformation.playButtonId) .addEventListener(\u0026#34;click\u0026#34;, event =\u0026gt; { player.play(); }); // Setting pause the video by play button. document.getElementById(playerInformation.pauseButtonId) .addEventListener(\u0026#34;click\u0026#34;, event =\u0026gt; { player.pause(); }); // Setting play and pause the video by play button. // When the video is playing, pause it. And when the video is pausing, play it. document.getElementById(playerInformation.playPauseButtonId) .addEventListener(\u0026#34;click\u0026#34;, event =\u0026gt; { player.getPaused().then(paused =\u0026gt; { paused ? player.play() : player.pause(); }); }); } export class PlayerInformation { constructor(playerId, buttonIds) { this.playerId = playerId; if (buttonIds.playButtonId) this.playButtonId = buttonIds.playButtonId; if (buttonIds.pauseButtonId) this.pauseButtonId = buttonIds.pauseButtonId; if (buttonIds.playPauseButtonId) this.playPauseButtonId = buttonIds.playPauseButtonId; } } サンプルコード koki-nakamura22/vimeo-js-example: This repository is example.xxxxxxxxxx\r参考にさせていただいたページ Player SDK: The Basics | Vimeo Developerxxxxxxxxxx\rvimeo/player.js: Interact with and control an embedded Vimeo Player.xxxxxxxxxx\r",
    "ref": "/blog/ja/posts/javascript/operating-vimeo-by-js/"
  },{
    "title": "WSL上にRuby on Railsのチュートリアル環境を構築する方法",
    "date": "",
    "description": "WSL上にRuby on Railsのチュートリアル環境を構築する方法について説明します。",
    "body": "この記事では、WSL上にRuby on Railsのチュートリアル環境を構築する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 Ruby on Railsチュートリアルの構築 参考にさせていただいたページ 対象読者 WSL上にRuby on Railsのチュートリアル環境を構築したい方 環境 Windows 10 (1903) Ubuntu (WSLのディストリビューション, 必ず、バージョン情報が無いものを使用すること) 前提条件 WSL有効済み Ubuntu (WSL)インストール済み Ruby on Railsチュートリアルの構築 下記のコマンドを上から順に実行してください。\n以上です！\n# Install necessary tools sudo apt update sudo apt upgrade -y sudo apt install autoconf bison build-essential libssl1.0-dev libyaml-dev libreadline-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev sqlite3 libsqlite3-dev nodejs-dev node-gyp npm git -y sudo npm install --global yarn # Install rbenv git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo \u0026#39;export PATH=\u0026#34;$HOME/.rbenv/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;eval \u0026#34;$(rbenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # Install ruby-build git clone https://github.com/rbenv/ruby-build.git \u0026#34;$(rbenv root)\u0026#34;/plugins/ruby-build # Install Ruby rbenv install 2.6.5 rbenv global 2.6.5 # Install Ruby on Rails gem install rails -v 5.1.6 --no-document 参考にさせていただいたページ Rails Girls - Japanesexxxxxxxxxx\r第1章 ゼロからデプロイまで - Railsチュートリアルxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/ruby-on-rails/building-env-of-rails-tutorial-wsl/"
  },{
    "title": "Hugoブログの記事を自動デプロイする方法",
    "date": "",
    "description": "Hugoブログの記事を自動デプロイする方法について説明します",
    "body": "この記事では、Hugoブログの記事を自動デプロイする方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 自動デプロイの仕組みを作る batファイルを作成 PowerShellスクリプトファイルを作成 スクリプトファイルの使い方 対象読者 Hugoでブログを作成しておりかつ自動でデプロイしたい方 環境 Windows 10 (1903) Command Prompt Power Shell (5.1.18362.145) Hugo (0.57.2) Hugo-extended (0.58.2) 前提条件 GitHub上でHugoのブログ記事を管理している GitHub上のブログリポジトリを\u0026quot;public\u0026quot;ディレクトリとしてクローン済 自動デプロイの仕組みを作る スクリプトファイルを作成し、それを実行することで自動デプロイを行います。\n今回はbatファイルとPowerShellのスクリプトファイルの両方を使います。\nbatファイルを使用する理由は、PowerShellスクリプトファイルを実行するのが楽になるからです。\nbatファイルを作成 \u0026ldquo;deploy.bat\u0026quot;というファイルをブログのルートディレクトリに作成し、下記のコードをペーストします。\npowershell -NoProfile -ExecutionPolicy Unrestricted .\\deploy.ps1 PowerShellスクリプトファイルを作成 \u0026ldquo;deploy.ps1\u0026quot;というファイルをブログのルートディレクトリに作成し、下記のコードをペーストします。\n# Build the project. hugo # Go to public directory. Set-Location .\\public # Add changes to git. git add . # Create a commit message. $dateTime = Get-Date -format \u0026#34;yyyy-MM-dd HH:mm:ss K\u0026#34; $commitMsg = \u0026#34;Site updated: ${dateTime}\u0026#34; # Commit. git commit -m $commitMsg # Push source and build repos. git push origin master # Come back to the project root. Set-Location .\\.. Write-Host \u0026#34;The web page has been updated!\u0026#34; -ForegroundColor \u0026#34;Cyan\u0026#34; スクリプトファイルの使い方 \u0026ldquo;deploy.bat\u0026quot;を実行するだけです。\nHugoのブログ記事を自動デプロイする仕組みについては以上です。\n良いブログライフを！\n",
    "ref": "/blog/ja/posts/hugo/deploying-articles-on-hugo-automatically/"
  },{
    "title": "タグをクリックした時の表示先位置を調整する方法",
    "date": "",
    "description": "同一ページ内へ飛ぶタグをクリックした時の表示先位置を調整する方法を説明します。",
    "body": "この記事では、同一ページ内へ飛ぶ\u0026lt;a\u0026gt;タグをクリックした時の表示先位置を調整する方法を説明します。\n何故調整する必要があるのか？それは、本ブログの様に固定ヘッダを使用していると、\u0026lt;a\u0026gt;タグをクリックした時に表示されるアンカーがヘッダの後ろに隠れるからです。\nこの記事の内容です。\n対象読者 環境 前提条件 リンクのジャンプ先位置調整 参考にさせていただいたページ 対象読者 同一ページ内へ飛ぶ\u0026lt;a\u0026gt;タグをクリックした時の表示先位置を調整したい方 環境 CSS3 前提条件 なし リンクのジャンプ先位置調整 add-on.css内で、下記のコードをリンク先のタグ(アンカー)に設定します。\nこの時、padding-topとmargin-topに設定する数値は必ず同じにしてください。\n#target-tag { display: block; padding-top: 60px; margin-top: -60px; } このブログでは、下記のコードにて各見出しに対する調整を行っています。\n/* For link destinations adjustment. */ #site-main .post .content h1, #site-main .post .content h2, #site-main .post .content h3, #site-main .post .content h4, #site-main .post .content h5, #site-main .post .content h6 { display: block; padding-top: 60px; margin-top: -60px; } 参考にさせていただいたページ ページ内リンクのジャンプ先の位置を複雑なタグは無しでCSSだけで調整する方法 | 大阪のホームページ制作会社YCOMxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/css/adjusting-link-dests-position/"
  },{
    "title": "VS Code上でホットリロード機能を含めたNode.js(Express)の開発環境構築方法",
    "date": "",
    "description": "VS Code上でホットリロード機能を含めたNode.js(Express)の開発環境構築方法について説明します。",
    "body": "この記事では、VS Code上でホットリロード機能を含めたNode.js(Express)の開発環境構築方法について説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 開発環境構築 プロジェクトディレクトリを作成 Expressインストール インストール テスト用環境を構築 Nodemonのグローバルインストール インストール 設定ファイル作成 launch.jsonの作成および編集 package.jsonを編集 プログラムのデバッグ実行方法 参考にさせていただいたページ 対象読者 VS Code上でNode.js(Express)の開発環境を構築したい方 環境 Windows 10 (1903) Visual Studio Code (1.38.1) Node.js (v10.16.3) npm (6.11.2) 前提条件 Node.js, npmおよびVS Codeインストール済 開発環境構築 プロジェクトディレクトリを作成 下記のコマンドを実行し、プロジェクト用のディレクトリを作成します。\n使用するコマンドはWindows, MacおよびLinux環境すべてで同じです。\nmkdir [project name] Expressインストール インストール 最初に、作成したプロジェクト用ディレクトリへ移動しておきます。\n次に、下記のコマンドを実行しExpressをローカルインストールします。\nnpm install express --save-dev テスト用環境を構築 最初に下記にコマンドを実行します。\nnpm init 次にapp.jsというファイルを作成し、下記のコマンドをペーストします。\nconst express = require(\u0026#34;express\u0026#34;); const app = express(); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; { res.send(\u0026#34;Hello World!\u0026#34;); }); const server = app.listen(3000, () =\u0026gt; { const host = server.address().address; const port = server.address().port; console.log(\u0026#34;Example app listening at http://%s:%s\u0026#34;, host, port); }); これでExpressの環境構築は終了です。\n次は、ホットリロードの設定をしていきます。 Nodemonのグローバルインストール ホットリロードの環境を構築するためにNodemonを使用します。\nインストール 下記のコマンドを実行し、Nodemonをグローバルインストールします。\nnpm install nodemon -g 設定ファイル作成 .nodemon.jsonをプロジェクトのルートパスに作成します。\nファイルを作成したら、下記のコードをファイル内へペーストします。\n{ \u0026#34;watch\u0026#34;: \u0026#34;./*\u0026#34;, \u0026#34;ext\u0026#34;: \u0026#34;js,json\u0026#34;, \u0026#34;exec\u0026#34;: \u0026#34;node ./app\u0026#34; } launch.jsonの作成および編集 最初に、launch.jsonを下記の作業を行い作成します。 [Debug] in a left menu -\u0026gt; [Gear icon] -\u0026gt; Select Environmentのところで\u0026quot;Node.js\u0026quot;を選択. 次に、launch.json内の\u0026quot;configuration\u0026quot;の中身を下記に置き換えます。\n{ \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Node: Nodemon\u0026#34;, \u0026#34;processId\u0026#34;: \u0026#34;${command:PickProcess}\u0026#34;, \u0026#34;restart\u0026#34;: true, \u0026#34;protocol\u0026#34;: \u0026#34;inspector\u0026#34; } 下記のコードは置き換え後の、ファイル内全体のコードです。\n{ // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;attach\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Node: Nodemon\u0026#34;, \u0026#34;processId\u0026#34;: \u0026#34;${command:PickProcess}\u0026#34;, \u0026#34;restart\u0026#34;: true, \u0026#34;protocol\u0026#34;: \u0026#34;inspector\u0026#34; } ] } package.jsonを編集 最後に、プログラムを実行するためのコマンドをpackage.jsonへ追加します。\n下記のコマンドをファイル内の\u0026quot;script\u0026quot;へ追加します。\n\u0026#34;debug\u0026#34;: \u0026#34;nodemon --inspect app.js\u0026#34; これで開発環境の構築は終了です。\rプログラムのデバッグ実行方法 プログラムをデバッグ実行する場合、下記のコマンドをプロジェクト用ディレクトリのルートで実行します。\nnpm run debug その後、VS Code上でF5キーを押します。\nこの時にVS Codeからアタッチするプロセスを聞かれた場合は、\u0026ldquo;node \u0026ndash;inspect app.js\u0026quot;を選択してください。\nプログラムを終了したい場合はShift + F5を押すか、デバッグメニューの\u0026quot;Disconnect\u0026quot;をクリックしてください。また、コマンドプロンプトもしくはPowerShell上でCtrl + Cを押すのも忘れないようにしてください。\n参考にさせていただいたページ Express のインストールxxxxxxxxxx\rExpress の「Hello World」の例xxxxxxxxxx\rremy/nodemon: Monitor for any changes in your node.js application and automatically restart the server - perfect for developmentxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/nodejs/creating-dev-env-of-nodejs/"
  },{
    "title": "Markdownファイルの目次を自動生成する方法",
    "date": "",
    "description": "Markdownファイルの目次を自動生成する方法を説明します。",
    "body": "この記事では、Markdownファイルの目次を自動生成する方法を説明します。\nこの記事の内容です。\n対象読者 前提条件 doctocをインストール 目次を自動生成 参考にさせていただいたページ 対象読者 Markdownで記述したドキュメントの目次を自動生成したい方 前提条件 お使いのPCにNode.jsをインストールしていること。\ndoctocをインストール 下記のコマンドを実行します。\nnpm install -g doctoc 目次を自動生成 目次を作成したいMarkdownファイルが存在するディレクトリをパラメータに指定し、doctocコマンドを実行します。\n下記は、カレントディレクトリを指定しています。\ndoctoc . 「Everything is OK.」が表示されるまで待ち、その後、ファイルを開いてみると先頭に\n\u0026lt;!-- START doctoc generated TOC please keep comment here to allow auto update --\u0026gt; \u0026lt;!-- DON\u0026#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --\u0026gt; **Table of Contents** *generated with [DocToc](https://github.com/thlorenz/doctoc)* と\n\u0026lt;!-- END doctoc generated TOC please keep comment here to allow auto update --\u0026gt; に囲まれて、目次が生成されているのを確認することができます。\nあとはそれらをコピーし、自由にお使いください。\nちなみに、本記事の目次は下記の形で出力されました。\n- [対象読者](#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85) - [前提条件](#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6) - [doctocをインストール](#doctoc%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB) - [目次を自動生成](#%E7%9B%AE%E6%AC%A1%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90) - [参考にさせていただいたページ](#%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%83%9A%E3%83%BC%E3%82%B8) 参考にさせていただいたページ thlorenz/doctoc: 📜 Generates table of contents for markdown files inside local git repository. Links are compatible with anchors generated by github or other sites.xxxxxxxxxx\r",
    "ref": "/blog/ja/posts/markdown/making-table-of-contents-of-markdown/"
  },{
    "title": "Hugoブログのコードブロックにコピーボタンを追加する方法",
    "date": "",
    "description": "Hugoで作成したブログのコードブロックにコピーボタンを追加する方法を説明します。",
    "body": "この記事では、Hugoで作成したブログのコードブロックにコピーボタンを追加する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 コードブロックへコピーボタンを追加 JavaScriptのコードを追加 CSSのコードを追加 参考にさせていただいたページ 対象読者 Hugoで作成したブログのコードブロックにコピーボタンを追加したい方 環境 Hugo 0.57.2 Hugo-extended 0.58.2 前提条件 HugoおよびHugo-entendedインストール済み コードブロックへコピーボタンを追加 JavaScriptのコードを追加 下記のコードをstatic/js/add-on.jsへ追加します。\n今回、即時関数を使用しているのは、今後機能を追加することを考えると変数のスコープ範囲を広げたくなかったからです。\n(() =\u0026gt; { \u0026#39;use strict\u0026#39;; if(!document.queryCommandSupported(\u0026#39;copy\u0026#39;)) { return; } function flashCopyMessage(el, msg) { el.textContent = msg; setTimeout(() =\u0026gt; { el.textContent = \u0026#34;Copy\u0026#34;; }, 1000); } function selectText(node) { let selection = window.getSelection(); let range = document.createRange(); if (node.childElementCount === 2) { // Skip the title. range.selectNodeContents(node.children[1]); } else { range.selectNodeContents(node); } selection.removeAllRanges(); selection.addRange(range); return selection; } function addCopyButton(containerEl) { let copyBtn = document.createElement(\u0026#34;button\u0026#34;); copyBtn.className = \u0026#34;highlight-copy-btn\u0026#34;; copyBtn.textContent = \u0026#34;Copy\u0026#34;; let codeEl = containerEl.firstElementChild; copyBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { try { let selection = selectText(codeEl); document.execCommand(\u0026#39;copy\u0026#39;); selection.removeAllRanges(); flashCopyMessage(copyBtn, \u0026#39;Copied!\u0026#39;) } catch(e) { console \u0026amp;\u0026amp; console.log(e); flashCopyMessage(copyBtn, \u0026#39;Failed :\\\u0026#39;(\u0026#39;) } }); containerEl.appendChild(copyBtn); } // Add copy button to code blocks let highlightBlocks = document.getElementsByClassName(\u0026#39;highlight\u0026#39;); Array.prototype.forEach.call(highlightBlocks, addCopyButton); })(); CSSのコードを追加 下記のコードをstatic/css/add-on.cssへ追加します。\n.highlight { position: relative; } .highlight pre { padding-right: 75px; } .highlight-copy-btn { position: absolute; bottom: 7px; right: 7px; border: 0; border-radius: 4px; padding: 1px; font-size: 0.7em; line-height: 1.8; color: #fff; background-color: #777; min-width: 55px; text-align: center; } .highlight-copy-btn:hover { background-color: #666; } 以上です！\r参考にさせていただいたページ Adding click-to-copy buttons to a Hugo powered blogxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/hugo/hugo-adding-copy-button/"
  },{
    "title": "Hugoブログのコードブロックにタイトルを追加する方法",
    "date": "",
    "description": "Hugoで作成したブログのコードブロックにタイトルを追加する方法を説明します。",
    "body": "この記事では、Hugoで作成したブログのコードブロックにタイトルを追加する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 コードブロックへタイトルを追加 JavaScriptのコードを追加 CSSのコードを追加 タイトルの設定方法 参考にさせていただいたページ 対象読者 Hugoで作成したブログのコードブロックにタイトルを追加したい方 環境 Hugo 0.57.2 Hugo-extended 0.58.2 前提条件 HugoおよびHugo-entendedインストール済み コードブロックへタイトルを追加 JavaScriptのコードを追加 下記のコードをstatic/js/add-on.jsへ追加します。\n今回、即時関数を使用しているのは、今後機能を追加することを考えると変数のスコープ範囲を広げたくなかったからです。\n(function addTitleToCodeBlock() { let list = document.body.getElementsByClassName(\u0026#34;highlight\u0026#34;); for (i = 0; i \u0026lt;= list.length - 1; i++) { let code = list[i].firstElementChild.firstElementChild; let codeName = code ? code.className.split(\u0026#34;:\u0026#34;)[1] : null; if (codeName) { let div = document.createElement(\u0026#34;div\u0026#34;); div.textContent = codeName; div.classList.add(\u0026#34;code-name\u0026#34;); code.parentNode.insertBefore(div, code); } } }()); CSSのコードを追加 下記のコードをstatic/css/add-on.cssへ追加します。\npre.chroma code { margin-top: -28px; padding-top: 40px; padding-bottom: 12px; } .code-name { display: inline-block; position: relative; padding: 4px 8px; background-color: #E7E9EB; color: #485A60; font-size: 13px; font-weight: 400; } タイトルの設定方法 コードブロックを使用する時、言語名の後ろに\u0026quot;:[title]\u0026ldquo;を追加します。\n下記はサンプルです。\n```javascript:test.js\rconsole.log(\u0026#34;Have a nice blog life!!!\u0026#34;);\r``` 以上の設定で、コードブロックへタイトルを表示することができます。 簡単ですね！上記のコードを考えた方に感謝です。\r参考にさせていただいたページ HugoのコードブロックにQiitaのようなTitleをつける | AABrainxxxxxxxxxx",
    "ref": "/blog/ja/posts/hugo/hugo-code-block-title/"
  },{
    "title": "Hugoブログにシンタックスハイライト機能を追加する方法",
    "date": "",
    "description": "Hugoで作成したブログにシンタックスハイライト機能を追加する方法を説明します。",
    "body": "この記事では、Hugoで作成したブログにシンタックスハイライト機能を追加する方法を説明します。\nこの記事の内容です。\n対象読者 環境 前提条件 シンタックスハイライト機能を追加 参考にさせていただいたページ 対象読者 Hugoで作成したブログにシンタックスハイライト機能を追加したい方 環境 Hugo 0.57.2 Hugo-extended 0.58.2 前提条件 HugoおよびHugo-entendedインストール済み シンタックスハイライト機能を追加 config.tomlへ下記のコードを追加します。\npygmentsCodefences = true pygmentsStyle = \u0026#34;fruity\u0026#34; pygmentsStyleへ代入する値を変更することで、様々なスタイルを使用することができます。\nまた、スタイルは下記のページから選択することができます。\nChroma Style Galleryxxxxxxxxxx\rちなみに、上記のコードで使用しているスタイルは\u0026quot;fruity\u0026quot;です。\n参考にさせていただいたページ Syntax highlighting in Hugo with Chroma | zwbetzxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/hugo/hugo-syntax-highlight/"
  },{
    "title": "Windows 10にRuby on Railsをインストールする方法",
    "date": "",
    "description": "Windows 10にRuby on Railsをインストールする方法を説明します。",
    "body": "本記事では、Windows 10環境にRuby on Railsをインストールする方法を説明していきます。\n本記事の内容です。\n対象読者 環境 前提条件 インストール方法 RubyとRuby on Railsがインストールされたことを確認 参考にさせていただいたページ 対象読者 Windows 10にRuby on Rails環境を作成したい方 環境 Windows 10 (1903) Chocolatey (0.10.15) 前提条件 Chocolateyインストール済み インストール方法 下記のコマンドたちを管理者権限のコマンドプロンプトもしくはPowerShellで実行します。\nREM Install Yarn choco install yarn -y REM Install Ruby choco install ruby -y REM Install msys2 choco install msys2 --params \u0026#34;/NoUpdate\u0026#34; -y refreshenv ridk install 2 3 REM Install SQLite gem uninstall sqlite3 --all ridk exec pacman -S mingw-w64-x86_64-sqlite3 gem install sqlite3 --platform ruby REM Install bundle gem install bundle REM Install Ruby on Rails gem install rails RubyやRuby on Railsインストール時にバージョンを指定したい方は、下記の様にRubyおよびRuby on Railsのインストールコマンドを置き換えてください。\n下記はサンプルです。\nRubyインストール時にバージョン2.4.2.2を指定する場合は、\u0026ldquo;choco install ruby -y\u0026quot;の代わりに下記を実行します。\nchoco install ruby --version=2.4.2.2 -y また、Ruby on Railsインストール時にバージョン5.2.2を指定する場合は、\u0026ldquo;gem install bundle rails\u0026quot;の代わりに下記を実行します。\ngem install rails -v 5.2.2 RubyとRuby on Railsがインストールされたことを確認 それぞれ下記のコマンドをコマンドプロンプトもしくはPowerShellで実行し、インストールされたことを確認します。\nruby -v rails -v インストールに成功している場合は、それぞれ下記の様にバージョン情報が表示されます。\nC:\\Users\\testuser\u0026gt;ruby -v ruby 2.6.4p104 (2019-08-28 revision 67798) [x64-mingw32] C:\\Users\\testuser\u0026gt;rails -v Rails 6.0.0 参考にさせていただいたページ chocolateyでruby on rails環境を構築 - Qiitaxxxxxxxxxx\rRuby on Railsの環境構築をしてみよう！(Windows) | プログラミングの入門なら基礎から学べるProgate[プロゲート]xxxxxxxxxx\r",
    "ref": "/blog/ja/posts/ruby-on-rails/how-to-install-rails-on-windows/"
  },{
    "title": "Hugo + GitHub Pagesでブログを作成する方法",
    "date": "",
    "description": "Hugo + GitHub Pagesでブログを作成する方法を説明します。",
    "body": "本記事では、Hugo + GitHub Pagesの組み合わせでブログ環境を構築する方法について説明します。\n上から順番に読んでいただくと、ブログを作成できるような流れになっています。\n本記事の内容です。\n環境 前提条件 インストール サイトを作成 記事を作成 テーマを適用 ローカルでサーバ起動 GitHub PagesへDeploy ゴール GitHub上でブログ用のリポジトリを作成 作成したリポジトリをクローン デプロイ用スクリプト作成 GitHub Pagesの設定 デプロイ テーマ テーマ一覧 個人的おすすめテーマ 参考にしたページ 環境 Windows10 (1903)\n前提条件 Chocolateyインストール済み Gitインストール済み インストール 下記コマンドを実行します。コマンドを実行するディレクトリはどこでも良いです。\nchoco install hugo -confirm choco install hugo-extended -confirm サイトを作成 サイトを作成したいディレクトリで下記コマンドを実行します。\n[サイト名]には、好きなサイト名を入力してください。\nhugo new site [サイト名] 記事を作成 記事を作成するには、作成したサイトディレクトリのルートで下記コマンドを実行します。\n[ディレクトリ名]は、後述する各テーマに沿って指定します。\n[記事名]は、好きな記事名を入力してください。\nhugo new [ディレクトリ名]/[記事名].md 記事作成後は、自由に作成したMarkdownファイルを編集します。\nテーマを適用 本記事内では、hugo-future-imperfect-slimを適用します。\n最初に作成したサイトディレクトリのルートで下記のコマンドを実行し、GitHubからthemesディレクトリへテーマをダウンロードします。\ngit clone https://github.com/pacollins/hugo-future-imperfect-slim.git themes/hugo-future-imperfect-slim その後、下記コマンドを同ディレクトリで実行し、サンプルサイトの設定を適用します。\nxcopy /s /e .\\themes\\hugo-future-imperfect-slim\\exampleSite . ちなみに、テーマを適用する場合は、下記の様にconfig.tomlへ「theme=\u0026quot;[テーマ名]\u0026quot;」の行を追記します。\ntheme = \u0026#34;hugo-future-imperfect-slim\u0026#34; テーマの一覧を確認できるページについては、本記事最後に記述します。\nローカルでサーバ起動 下記コマンドを実行する。\nhugo server また、下記のように「-p [ポート番号]」とオプションを付けると、そのポート番号で起動することが可能。\nhugo server -p 12345 これで、最低限ホームページを作成することができます。 GitHub PagesへDeploy ゴール 今回は、GitHub Pagesのサブディレクトリで公開します。 例:下記URLにてブログを公開。\nhttps://koki-nakamura22.github.io/test-hugo-blog/\nGitHub上でブログ用のリポジトリを作成 静的ファイルを公開するためのリポジトリを作成します。\n今回は「test-hugo-blog」という名前のリポジトリを作成します。\n作成したリポジトリをクローン サイトディレクトリのルートで下記コマンドを実行し、作成したリポジトリをクローンします。\n下記のコマンドでは、念のためクローン前に既存のpublicディレクトリを削除しています。\nrmdir /s /q public git clone https://github.com/koki-nakamura22/test-hugo-blog.git public デプロイ用スクリプト作成 deploy.batというファイルをサイトディレクトリのルートに作成し、下記コードをファイル内にコピー\u0026amp;ペーストします。\n@echo off REM Build the project. hugo REM Go to public directory. cd public REM Add changes to git. git add . REM Create a commit message. set d=%date% set yyyy=%d:~-10,4% set mm=%d:~-5,2% set dd=%d:~-2,2% set t=%time: =0% set hh=%t:~0,2% set mn=%t:~3,2% set ss=%t:~6,2% set commitMsg=Site updated: %yyyy%-%mm%-%dd% %hh%:%mn%:%ss% REM Commit. git commit -m \u0026#34;%commitMsg%\u0026#34; REM Push source and build repos. git push origin master REM Come back to the project root. cd .. echo \u0026#34;The web page has been updated!\u0026#34; GitHub Pagesの設定 「GitHub上でブログ用のリポジトリを作成」で作成したリポジトリのページを開き、下記の設定を行います。\nSettings -\u0026gt; GitHub PagesのSourceでmaster branchを選択 (大体の場合はmaster branchだと思います。)\n実際の画面を確認しながら作業を行いたい方は、下記ページを参考にするとわかりやすいです。\nHexoブログをGitHub Pagesで最速公開する | Qookie Techxxxxxxxxxx デプロイ 先ほど作成した「deploy.bat」を実行します。\nここまで作業が終わったら、実際に作成したurlへアクセスし、Hugoで作成したものが表示されるかを確認してみましょう。\nテーマ テーマ一覧 Complete List | Hugo Themesxxxxxxxxxx 個人的おすすめテーマ Hugo Primer | Hugo Themesxxxxxxxxxx Future Imperfect | Hugo Themesxxxxxxxxxx Hugo Future Imperfect Slim | Hugo Themesxxxxxxxxxx Hugo Nuo | Hugo Themesxxxxxxxxxx 参考にしたページ Quick Start | Hugoxxxxxxxxxx Commands | Hugoxxxxxxxxxx HUGOとGitHub Pagesで自分のBlogページを作ってみた（Windows） - Qiitaxxxxxxxxxx Hugoを使って生成した静的ページをGithub pagesにデプロイする - FREITAGEEKxxxxxxxxxx ",
    "ref": "/blog/ja/posts/hugo/how-to-make-blog-by-hugo-and-github-pages/"
  },{
    "title": "Windows 10でパッケージマネージャ(Chocolatey)を使用する方法",
    "date": "",
    "description": "Windows 10でLinuxのapt-getやyumの様にパッケージを管理する環境を構築する方法を説明します。",
    "body": "本記事では、Chocolateyを使用し、Windows環境でLinuxのapt-getやyumを使用するパッケージ管理を実現する方法について説明します。\n本記事の内容です。\n対象読者 インストール方法 インストールされたことを確認 実際に何かインストールしてみる インストール済みのパッケージ確認 アンインストール方法 パッケージのアップデート方法 参考にさせていただいたページ 対象読者 WindowsでもLinuxのapt-getやyumのような機能を使用したい方 インストール方法 下記のコマンドを、管理者権限で起動したコマンドプロンプト上で実行します。\n@\u0026#34;%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\u0026#34; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \u0026#34;iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;))\u0026#34; \u0026amp;\u0026amp; SET \u0026#34;PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\u0026#34; もしくは、下記のコマンドを管理者権限で起動したPowerShell上で実行します。\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) インストールされたことを確認 上記のコマンドが終了した後に\nchoco -v を実行し、下記のようにバージョン情報が表示されたらインストールが成功しています。\nC:\\WINDOWS\\system32\u0026gt;choco -v 0.10.15 実際に何かインストールしてみる Chocolatey Software | Packagesxxxxxxxxxx\rを参考に、試しに7zipをインストールしてみます。\n下記のコマンドを実行します。\nこの時、コマンドプロンプトやPowerShellは管理者権限で起動しておきましょう。(ソフトウェアをインストールする時は管理者権限が求められるため。)\nまた、途中で処理を続行するかを問われるので、「Y」を入力し続行します。\nchoco install 7zip インストール済みのパッケージ確認 インストール済みのパッケージを確認する場合は、下記のコマンドを実行します。\n試しに、上記でインストールした7zipが表示されるか確認してみましょう。\nchoco list -localonly アンインストール方法 インストール済みのパッケージをアンインストールする際は、下記コマンドを実行します。\nこの時、本当に削除してもよいかを聞かれるので「Y」を入力し、処理を続行します。\nchoco install [package name] 例えば、上記でインストールしたものをアンインストールするには下記のコマンドを実行します。\nchoco uninstall 7zip パッケージのアップデート方法 すべてのパッケージをアップデートする場合は下記のコマンドを、\nchoco update all パッケージを指定してアップデートする場合は下記のコマンドを実行します。\nchoco update [package name] 参考にさせていただいたページ Chocolatey Software | Installationxxxxxxxxxx\rはじめてのChocolatey - nuits.jp blogxxxxxxxxxx\r",
    "ref": "/blog/ja/posts/chocolatey/how-to-install-chocolatey/"
  }]
