<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on Koki&#39;s personal blog</title>
    <link>https://koki-nakamura22.github.io/blog/ja/categories/windows/</link>
    <description>Recent content in Windows on Koki&#39;s personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Powered by Hugo. Copyright © 2022 Koki NAKAMURA</copyright>
    <lastBuildDate>Thu, 03 Mar 2022 20:49:15 +0900</lastBuildDate>
    
	<atom:link href="https://koki-nakamura22.github.io/blog/ja/categories/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google Play ストアからダウンロードしたAndroidアプリのログを取得 (Windows使用)</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2022/03/03/collecting-logs-from-released-android-app/</link>
      <pubDate>Thu, 03 Mar 2022 20:49:15 +0900</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2022/03/03/collecting-logs-from-released-android-app/</guid>
      <description>この記事では、Google Play ストアからダウンロードしたAndroidアプリのログを取得する方法について説明します。
この記事の内容です。
 対象読者 環境 前提条件 ログを取得できるようにするための準備を行う  AndroidデバイスのUSBデバッグを有効にする Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする   ログを取得する 注意点 そもそも、何故こんなことをしようと思ったのかの経緯 (余談) 参考にしたページ  対象読者  何かしらの理由でGoogle Play ストアからダウンロードしたアプリのログを取得したい方  環境  Pixel 6 (Android 12, Build. SQ1D.220205.004) Windows 10 (Ver. 21H2, Build. 19044.1526)  前提条件 なし
ログを取得できるようにするための準備を行う AndroidデバイスのUSBデバッグを有効にする  [設定] &amp;gt; [デバイス情報]に移動し、一番下にある ビルド番号 を開発者向けオプションがオンになるまで連打する。 [設定] &amp;gt; [システム] &amp;gt; [開発者向けオプション]に移動し、 USB デバッグ をオンにする。  Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする  SDK Platform-Tools リリースノート の SDK Platform-Tools for Windows をダウンロード をクリックする。 表示される利用規約に同意した後に ダウンロードする: Android SDK Platform-Tools (Windows用) をクリックし、任意の場所にzipファイルをダウンロードする。 2でダウンロードしたzipファイルを解凍する。 コマンドプロンプトを開き、3で解凍してできたフォルダ内のplatform-toolsフォルダへ移動する。 adb devices を実行し、以下の内容が表示され正常に動作していることを確認する。  * daemon not running; starting now at tcp:5037* daemon started successfullyList of devices attachedログを取得する  Windows PCとAndroidスマホをUSB Type-Cケーブルなどで接続する。 Windows PC側でコマンドプロンプトから &amp;ldquo;Android Debug Bridge (ADB) をダウンロードし使用可能な状態にする&amp;quot;の4と5 を実行し、何かしらのデバイス情報が表示されることを確認しておく。 続けて adb logcat *:# を実行し、コマンドプロンプト上でログがリアルタイムで流れることを確認する。</description>
    </item>
    
    <item>
      <title>WindowsでGoogle Driveをアンインストールする時に「Googleドライブが使用中です。終了してからアンインストールしてください」と言われた時の対処法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2022/02/19/uninstall-google-drive-app-on-windows/</link>
      <pubDate>Sat, 19 Feb 2022 19:53:40 +0900</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2022/02/19/uninstall-google-drive-app-on-windows/</guid>
      <description>この記事では、WindowsでGoogle Driveをアンインストールする時に「Googleドライブが使用中です。終了してからアンインストールしてください」と言われた時の対処法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 原因 Google Driveアプリを終了させる方法  手動で行う方法 コマンド一発で行う方法    対象読者  WindowsでGoogle Driveをアンインストールする時にメッセージが表示され邪魔された方  環境  Windows 10  前提条件 なし
原因 表示されるメッセージの通り、Google Driveアプリが起動されているせいです。
空気を読んで、自分で自分を終了させてくれりゃいいのに。
Google Driveアプリを終了させる方法 手動で行う方法 以下の流れで作業を行います。
 ctrl, shift, escキーを同時押しし、タスクマネージャーを起動します。 「プロセス」タブを開きます。 「バックグラウンドプロセス」一覧から「Google Drive」を右クリックし、「タスクの終了」をクリックします。(表示されている複数のGoogle Driveに対して行います。)  コマンド一発で行う方法 Windows Powershellを起動し、以下のコマンドを実行し、数秒待ちます。
taskkill /F /IM GoogleDriveFS.exe上記を行った後、Google Driveをアンインストールできるようになります。</description>
    </item>
    
    <item>
      <title>Windowsにpyenvをインストールする方法 (Chocolatey使用)</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2022/02/13/install-pyenv-to-windows/</link>
      <pubDate>Sun, 13 Feb 2022 20:46:22 +0900</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2022/02/13/install-pyenv-to-windows/</guid>
      <description>この記事では、WindowsでChocolateyを使用し、pyenvをインストールする方法を説明します。
この記事の内容です。
 対象読者 環境 前提条件 インストール  1. インストールコマンド実行 2. 環境変数設定 3. インストールされたことを確認   余談  対象読者  Windowsにpyenvをインストールしたい方  環境  Windows 10  前提条件  Chocolateyインストール済み
インストール方法はWindows 10でパッケージマネージャ(Chocolatey)を使用する方法を参照。  インストール 1. インストールコマンド実行 以下のコマンドをPowershellコンソール上で実行します。
choco install pyenv-win2. 環境変数設定 以下、2つのパスを環境変数Pathへ追加します。
%USERPROFILE%\.pyenv\pyenv-win\bin%USERPROFILE%\.pyenv\pyenv-win\shims3. インストールされたことを確認 最後に、Powershell コンソールで
pyenv --versionを実行し、以下のようにバージョン情報が表示されたらインストール完了です。
pyenv 1.2.22-47-g4c302a02余談 環境変数Pathの設定は
SETX PATH &amp;#34;%PATH%;%USERPROFILE%\.pyenv\pyenv-win\bin;%USERPROFILE%\.pyenv\pyenv-win\shims&amp;#34;をPowershellコンソール上で実行しても行うことができます。が、これを行う時に環境変数の値の合計文字数が1024文字を超えていると、警告: 保存されたデータは 1024 文字に切り捨てられました。と表示され、環境変数Pathの値の一部が吹っ飛ぶので気を付けましょう。 筆者は一度Pathの一部を吹っ飛ばしましたが、幸い、直前にPathの値すべてをテキストエディタに貼り付けていたため、事なきを得ました。</description>
    </item>
    
    <item>
      <title>Windowsでコマンドを使用し環境変数を永続的に設定する方法</title>
      <link>https://koki-nakamura22.github.io/blog/ja/2022/02/12/setting-environment-variable-permanently/</link>
      <pubDate>Sat, 12 Feb 2022 20:54:50 +0900</pubDate>
      
      <guid>https://koki-nakamura22.github.io/blog/ja/2022/02/12/setting-environment-variable-permanently/</guid>
      <description>この記事では、Windows でコマンドを使用し環境変数を永続的に設定する方法を説明します。
これによって、いちいちシステムのプロパティ画面を開かなくても、コマンド一発で環境変数を設定できるようになります。
また、環境変数の設定が必要なインストール作業をスクリプト化することもできるようになります。
この記事の内容です。
 対象読者 環境 前提条件 設定するためのコマンド  ユーザ環境に設定 システム環境に設定   参考にさせていただいたページ  対象読者  Windows の環境変数を設定するために、いちいちシステムのプロパティを開きたくない方  環境  Windows 10  前提条件 無し
設定するためのコマンド SETX コマンドを使用します。
以下は、TESTという変数名で、test variable valueという値を設定する例です。
ユーザ環境に設定 SETX TEST &amp;#34;test variable value&amp;#34;システム環境に設定 以下のコマンドは、必ず Powershell を管理者権限で起動し実行する必要があります。
SETX /M TEST &amp;#34;test variable value&amp;#34;参考にさせていただいたページ setx | Microsoft Docs</description>
    </item>
    
  </channel>
</rss>